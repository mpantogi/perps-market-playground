"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runSchema = void 0;
const zod_1 = require("zod");
/// ================================ INPUT CONFIG SCHEMAS ================================ \\\
// Different regular expressions used to validate formats like
// general string interpolation, step names, contract artifacts and packages
const stepRegex = RegExp(/^[\w-]+\.[\w-]+$/, 'i');
exports.runSchema = zod_1.z
    .object({
    /** The javascript (or typescript) file to load  */
    exec: zod_1.z.string().describe('The javascript (or typescript) file to load'),
    /** The function to call in this file  */
    func: zod_1.z.string().describe('The function to call in this file'),
    /**
     * An array of files and directories that this script depends on.
     * The cache of the cannonfile's build is recreated when these files change.
     */
    modified: zod_1.z
        .array(zod_1.z.string())
        .nonempty()
        .describe("An array of files and directories that this script depends on. The cache of the cannonfile's build is recreated when these files change."),
    /**
     * The artifacts that are generated by this script. Should be in the format (example): `contracts.FooBar`
     */
    outputs: zod_1.z
        .array(zod_1.z.string())
        .describe('The artifacts that are generated by this script. Should be in the format (example): `contracts.FooBar`'),
})
    .merge(zod_1.z
    .object({
    /** Arguments passed to the function (after the ChainBuilder object) */
    args: zod_1.z.array(zod_1.z.string()).describe('Arguments passed to the function (after the ChainBuilder object)'),
    /** Environment variables to be set on the script */
    env: zod_1.z.array(zod_1.z.string()).describe('Environment variables to be set on the script'),
    /** List of operations that this action depends on */
    depends: zod_1.z
        .array(zod_1.z.string().refine((val) => Boolean(val.match(stepRegex)), (val) => ({
        message: `Bad format for "${val}". Must reference a previous operation, example: 'contract.Storage'`,
    })))
        .describe('List of operations that this operation depends on, which Cannon will execute first. If unspecified, Cannon automatically detects dependencies.'),
})
    .partial());
//# sourceMappingURL=schemas.js.map