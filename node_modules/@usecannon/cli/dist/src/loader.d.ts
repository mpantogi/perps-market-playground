import { CannonLoader, IPFSLoader } from '@usecannon/builder';
import { CliSettings } from './settings';
/**
 * @deprecated
 */
export declare class LocalLoader implements CannonLoader {
    dir: string;
    constructor(dir: string);
    getLabel(): string;
    read(url: string): Promise<any>;
    put(misc: any): Promise<string | null>;
    list(): Promise<string[]>;
    remove(url: string): Promise<void>;
}
export declare class CliLoader implements CannonLoader {
    readIpfs?: IPFSLoader;
    writeIpfs?: IPFSLoader;
    repo: IPFSLoader;
    dir: string;
    constructor(opts: {
        readIpfs: IPFSLoader | undefined;
        writeIpfs: IPFSLoader | undefined;
        repoLoader: IPFSLoader;
        fileCacheDir: string;
    });
    getLabel(): string;
    getCacheFilePath(url: string): string;
    put(misc: any): Promise<string>;
    read(url: string): Promise<any>;
    remove(url: string): Promise<void>;
    list(): Promise<string[] | never[]>;
    static getCacheHash(url: string): string;
}
export declare class IPFSLoaderWithRetries extends IPFSLoader {
    put(misc: any): Promise<string>;
    read(url: string): Promise<any>;
}
export declare function getMainLoader(cliSettings: CliSettings): {
    ipfs: CliLoader;
    file: LocalLoader;
};
//# sourceMappingURL=loader.d.ts.map