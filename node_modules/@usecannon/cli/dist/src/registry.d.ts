import { CannonRegistry, FallbackRegistry, OnChainRegistry } from '@usecannon/builder';
import * as viem from 'viem';
import { CliSettings } from './settings';
/**
 * stores packages in the filesystem, using the filename as a key and the contents as the value. very simple is the intent.
 */
export declare class LocalRegistry extends CannonRegistry {
    packagesDir: string;
    constructor(packagesDir: string);
    getLabel(): string;
    getTagReferenceStorage(packageRef: string, chainId: number): string;
    getMetaTagReferenceStorage(packageRef: string, chainId: number): string;
    getUrl(packageRef: string, chainId: number): Promise<string | null>;
    getMetaUrl(packageRef: string, chainId: number): Promise<string | null>;
    publish(packagesNames: string[], chainId: number, url: string, metaUrl: string): Promise<string[]>;
    scanDeploys(packageRef: string, chainId?: number): Promise<{
        name: string;
        chainId: number;
    }[]>;
    getAllUrls(filterPackage: string, chainId: number): Promise<Set<string>>;
}
export declare class ReadOnlyOnChainRegistry extends OnChainRegistry {
    publish(): Promise<string[]>;
    publishMany(): Promise<string[]>;
    setPackageOwnership(): Promise<viem.Hash>;
}
export declare function createDefaultReadRegistry(cliSettings: CliSettings, additionalRegistries?: CannonRegistry[]): Promise<FallbackRegistry>;
export declare function createDryRunRegistry(cliSettings: CliSettings): Promise<FallbackRegistry>;
//# sourceMappingURL=registry.d.ts.map