"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPlugins = exports.loadPlugin = exports.listInstalledPlugins = exports.removePlugin = exports.installPlugin = void 0;
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const lodash_1 = __importDefault(require("lodash"));
const fs_extra_1 = require("fs-extra");
const builder_1 = require("@usecannon/builder");
const settings_1 = require("./settings");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('cannon:cli:plugins');
const DEPRECATED_PLUGINS = ['cannon-plugin-router'];
async function installPlugin(name) {
    const packageJsonExists = (0, fs_extra_1.existsSync)(path_1.default.join(_getPluginDir(), 'package.json'));
    if (!packageJsonExists) {
        await (0, fs_extra_1.mkdirp)(_getPluginDir());
        debug('plugin init:', await _exec('npm init -y'));
    }
    debug('plugin install:', await _exec(`npm install ${name}`));
}
exports.installPlugin = installPlugin;
async function removePlugin(name) {
    debug('plugin uninstall:', await _exec(`npm uninstall ${name}`));
}
exports.removePlugin = removePlugin;
async function listInstalledPlugins() {
    if (!(0, fs_extra_1.existsSync)(_getPluginDir())) {
        return [];
    }
    const installedPlugins = Object.keys(lodash_1.default.pickBy(JSON.parse(await _exec('npm ls --json')).dependencies, (d) => !d.extraneous));
    for (const deprecated of DEPRECATED_PLUGINS) {
        const index = installedPlugins.indexOf(deprecated);
        if (index !== -1) {
            await removePlugin(deprecated);
            installedPlugins.splice(index, 1);
        }
    }
    return installedPlugins;
}
exports.listInstalledPlugins = listInstalledPlugins;
async function loadPlugin(name) {
    const pluginFolder = path_1.default.join(_getPluginDir(), 'node_modules', name);
    // read pkg to get the actual plugin load dir
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const pkg = require(path_1.default.join(pluginFolder, 'package.json'));
    const pluginFile = pkg.cannon || pkg.main || '';
    return require(path_1.default.join(pluginFolder, pluginFile));
}
exports.loadPlugin = loadPlugin;
async function loadPlugins() {
    const installedPlugins = await listInstalledPlugins();
    for (const plugin of installedPlugins) {
        const pluginAction = await loadPlugin(plugin);
        if (Array.isArray(pluginAction)) {
            for (const action of pluginAction)
                (0, builder_1.registerAction)(action);
        }
        else {
            (0, builder_1.registerAction)(pluginAction);
        }
    }
}
exports.loadPlugins = loadPlugins;
function _getPluginDir() {
    const cliSettings = (0, settings_1.resolveCliSettings)();
    return path_1.default.join(cliSettings.cannonDirectory, 'plugins');
}
function _exec(cmd) {
    return new Promise((resolve, reject) => {
        (0, child_process_1.exec)(cmd, { cwd: _getPluginDir() }, (error, stdout) => {
            if (error) {
                reject(new Error(`command ${cmd} failed with error: ${error}`));
                return;
            }
            resolve(stdout);
        });
    });
}
//# sourceMappingURL=plugins.js.map