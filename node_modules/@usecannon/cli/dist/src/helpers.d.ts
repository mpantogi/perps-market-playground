import { CannonRegistry, ChainArtifacts, ChainDefinition, ContractMap } from '@usecannon/builder';
import { AbiEvent } from 'abitype';
import * as viem from 'viem';
export declare function filterSettings(settings: any): Promise<any>;
export declare function setupAnvil(): Promise<void>;
export declare function getSighash(fragment: viem.AbiFunction | AbiEvent): string;
export declare function formatAbiFunction(v: viem.AbiFunction): string;
export declare function execPromise(command: string): Promise<string>;
export declare function resolveCannonVersion(): Promise<string>;
export declare function checkCannonVersion(currentVersion: string): Promise<void>;
export declare function loadCannonfile(filepath: string): Promise<{
    def: ChainDefinition;
    name: string;
    version: string;
    preset: string;
    cannonfile: string;
}>;
/**
 * Forge added a breaking change where it stopped returning the ast on build artifacts,
 * and the user has to add the `--ast` param to have them included.
 * This check is so we make sure to have asts regardless the user's foundry version.
 * Ref: https://github.com/foundry-rs/foundry/pull/7197
 */
export declare function checkForgeAstSupport(): Promise<boolean>;
export declare function getChainName(chainId: number): string;
export declare function getChainId(chainName: string): number;
export declare function getChainDataFromId(chainId: number): viem.Chain | null;
export declare function ensureChainIdConsistency(providerUrl?: string, chainId?: number): Promise<void>;
export declare function saveToMetadataCache(packageName: string, key: string, value: string): Promise<void>;
export declare function readMetadataCache(packageName: string): Promise<{
    [key: string]: string;
}>;
/**
 * Converts a camelCase string to a flag case string.
 *
 * @param key The camelCase string.
 * @returns The flag case string.
 */
export declare function toFlagCase(key: string): string;
/**
 * Converts an object of options to an array of command line arguments.
 *
 * @param options The options object.
 * @returns The command line arguments.
 */
export declare function toArgs(options: {
    [key: string]: string | boolean | number | bigint | undefined;
}): string[];
/**
 * Extracts the contract and details from the state of a deploy package
 *
 * @param state The deploy package state
 * @returns an object containing ContractData
 *
 */
export declare function getContractsAndDetails(state: {
    [key: string]: {
        artifacts: Pick<ChainArtifacts, 'contracts'>;
    };
}): ContractMap;
/**
 *
 * @param registries The cannon registries
 * @returns The source a cannon package is loaded from
 */
export declare function getSourceFromRegistry(registries: CannonRegistry[]): string | undefined;
/**
 * Verifies a private key is valid
 * @param privateKey The private key to verify
 * @returns boolean If the private key is valid
 */
export declare function isPrivateKey(privateKey: viem.Hex): boolean;
/**
 * Normalizes a private key
 * @param privateKey The private key to normalize
 * @returns The normalized private key
 */
export declare function normalizePrivateKey(privateKey: string | viem.Hex): viem.Hex;
/**
 * Checks and normalizes a private key
 * @param privateKey
 * @returnsThe normalized private keys
 */
export declare function checkAndNormalizePrivateKey(privateKey: string | viem.Hex | undefined): viem.Hex | undefined;
//# sourceMappingURL=helpers.d.ts.map