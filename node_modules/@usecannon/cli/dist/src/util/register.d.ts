import { CannonSigner } from '@usecannon/builder';
import * as viem from 'viem';
type WaitForEventProps = {
    eventName: string;
    abi: viem.Abi;
    providerUrl: string;
    expectedArgs: any;
};
/**
 * Checks if a package is registered on a registry provider.
 *
 * @param {Object[]} registryProviders - An array of objects containing viem.PublicClient and array of CannonSigner.
 * @param {string} packageRef - The reference string of the package to check.
 * @param {viem.Address} contractAddress - Target registry address
 * @returns {Promise<boolean[]>} - A promise that resolves to an array of booleans, each indicating if the package is registered in the corresponding registry.
 */
export declare const isPackageRegistered: (registryProviders: {
    provider: viem.PublicClient;
    signers: CannonSigner[];
}[], packageRef: string, contractAddress: viem.Address[]) => Promise<boolean>;
/**
 * Waits until for a specific event on the Cannon Registry or a timeout occurs.
 *
 * @param {string} params.eventName - The name of the event to wait for.
 * @param {viem.Abi} params.abi - The ABI (Application Binary Interface) that includes the event.
 * @param {number} params.chainId - The chain ID of the registry.
 * @param {any} params.expectedArgs - The expected arguments of the event.
 * @returns {Promise<void>} - A promise that resolves with the event logs when the event is received or rejects with an error on timeout or if an error occurs while watching the event.
 */
export declare const waitForEvent: ({ eventName, abi, providerUrl, expectedArgs }: WaitForEventProps) => Promise<unknown>;
export {};
//# sourceMappingURL=register.d.ts.map