"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeModuleDeployments = void 0;
const promises_1 = __importDefault(require("node:fs/promises"));
const path_1 = __importDefault(require("path"));
const chalk_1 = require("chalk");
/**
 * Recursively writes all deployments for a chainbuilder output
 */
async function writeModuleDeployments(deploymentPath, prefix, outputs) {
    let relativePath = path_1.default.relative(process.cwd(), deploymentPath);
    if (!relativePath.startsWith('/')) {
        relativePath = './' + relativePath;
    }
    console.log((0, chalk_1.green)(`Writing ${prefix ? prefix + ' deployment' : 'deployment'} artifacts to ${relativePath}`));
    await promises_1.default.mkdir(deploymentPath, { recursive: true });
    if (prefix) {
        prefix += '.';
    }
    for (const m in outputs.imports) {
        await writeModuleDeployments(deploymentPath, `${prefix}${m}`, outputs.imports[m]);
    }
    for (const contract in outputs.contracts) {
        const file = path_1.default.join(deploymentPath, `${prefix}${contract}.json`);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const contractOutputs = outputs.contracts[contract];
        const transformedOutput = {
            ...contractOutputs,
            abi: contractOutputs.abi,
        };
        // JSON format is already correct, so we can just output what we have
        await promises_1.default.writeFile(file, JSON.stringify(transformedOutput, null, 2));
    }
}
exports.writeModuleDeployments = writeModuleDeployments;
//# sourceMappingURL=write-deployments.js.map