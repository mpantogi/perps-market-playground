"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveProviderAndSigners = exports.resolveRegistryProviders = exports.resolveWriteProvider = exports.getChainIdFromProviderUrl = exports.isURL = exports.ProviderOrigin = void 0;
const debug_1 = __importDefault(require("debug"));
const viem = __importStar(require("viem"));
const chalk_1 = require("chalk");
const eth_provider_1 = __importDefault(require("eth-provider"));
const accounts_1 = require("viem/accounts");
const builder_1 = require("@usecannon/builder");
const chains_1 = require("../chains");
const debug = (0, debug_1.default)('cannon:cli:provider');
var ProviderOrigin;
(function (ProviderOrigin) {
    ProviderOrigin["Registry"] = "registry";
    ProviderOrigin["Write"] = "write";
})(ProviderOrigin || (exports.ProviderOrigin = ProviderOrigin = {}));
const isURL = (url) => {
    try {
        const tmpUrl = new URL(url);
        return ['http:', 'https:'].includes(tmpUrl.protocol);
    }
    catch {
        return false;
    }
};
exports.isURL = isURL;
const getChainIdFromProviderUrl = async (providerUrl) => {
    if (!(0, exports.isURL)(providerUrl))
        throw new Error('Provider URL has not a valid format');
    const provider = viem.createPublicClient({ transport: viem.http(providerUrl) });
    return provider.getChainId();
};
exports.getChainIdFromProviderUrl = getChainIdFromProviderUrl;
async function resolveWriteProvider(settings, chainId) {
    // Check if the first provider URL doesn't start with 'http'
    const isProviderUrl = (0, exports.isURL)(settings.providerUrl.split(',')[0]);
    if (!isProviderUrl) {
        const chainData = (0, chains_1.getChainById)(chainId);
        // If privateKey is present or no valid http URLs are available in rpcUrls
        if (settings.privateKey || chainData.rpcUrls.default.http.length === 0) {
            if (chainData.rpcUrls.default.http.length === 0) {
                console.error((0, chalk_1.red)(`Failed to establish a connection with any provider. Please specify a valid RPC url using the ${(0, chalk_1.bold)('--provider-url')} flag.`));
                process.exit(1);
            }
            // Use default http URLs from chainData
            settings.providerUrl = chainData.rpcUrls.default.http.join(',');
        }
        else {
            // Merge with viem's default rpc URLs, remove duplicates
            const providers = [...new Set([...settings.providerUrl.split(','), ...chainData.rpcUrls.default.http])];
            settings.providerUrl = providers.join(',');
        }
    }
    if (settings.providerUrl.split(',')[0] === 'frame' && !settings.quiet) {
        console.warn("\nUsing Frame as the default provider. If you don't have Frame installed, Cannon defaults first to http://localhost:8545, then to Viem's default RPCs.\n\n");
        console.warn(`Set a custom provider url in your settings (run ${(0, chalk_1.bold)('cannon setup')}) or pass it as an env variable (${(0, chalk_1.bold)('CANNON_PROVIDER_URL')}).\n\n`);
    }
    return resolveProviderAndSigners({
        chainId,
        checkProviders: settings.providerUrl.split(','),
        privateKey: settings.privateKey,
        origin: ProviderOrigin.Write,
    });
}
exports.resolveWriteProvider = resolveWriteProvider;
async function resolveRegistryProviders(cliSettings) {
    const resolvedProviders = [];
    for (const registryInfo of cliSettings.registries) {
        resolvedProviders.push(await resolveProviderAndSigners({
            chainId: registryInfo.chainId,
            checkProviders: registryInfo.providerUrl,
            privateKey: cliSettings.privateKey,
            origin: ProviderOrigin.Registry,
        }));
    }
    return resolvedProviders;
}
exports.resolveRegistryProviders = resolveRegistryProviders;
async function resolveProviderAndSigners({ chainId, checkProviders = ['frame'], privateKey, origin, }) {
    if (origin === ProviderOrigin.Write) {
        console.log((0, chalk_1.grey)(`Initiating connection attempt to: ${(0, chalk_1.bold)(checkProviders[0])}`));
        if (checkProviders.length === 1)
            console.log('');
    }
    debug('resolving provider', checkProviders.map((p) => (p ? p.replace(RegExp(/[=A-Za-z0-9_-]{32,}/), '*'.repeat(32)) : p)), chainId);
    const rawProvider = (0, eth_provider_1.default)(checkProviders, { origin: 'Cannon' });
    // ensure provider is enabled and on the chain we expect
    try {
        rawProvider.setChain(Number.parseInt(chainId.toString())); // its important here we ensure chainId is a number
    }
    catch (err) {
        console.error(`Failed to use chain id ${chainId}`, err);
        throw err;
    }
    let publicClient;
    // TODO: if at any point we let users provide multiple urls, this will have to be changed.
    // force provider to use JSON-RPC instead of Web3Provider for local http urls
    const signers = [];
    if ((0, exports.isURL)(checkProviders[0])) {
        debug('use explicit provider url', checkProviders.map((p) => (p ? p.replace(RegExp(/[=A-Za-z0-9_-]{32,}/), '*'.repeat(32)) : p)));
        try {
            publicClient = viem.createPublicClient({
                chain: (0, chains_1.getChainById)(chainId),
                transport: viem.http(checkProviders[0]),
            }).extend((0, builder_1.traceActions)({}));
        }
        catch (err) {
            if (checkProviders.length <= 1) {
                console.error((0, chalk_1.red)(`Failed to establish a connection with any provider. Please specify a valid RPC url using the ${(0, chalk_1.bold)('--provider-url')} flag.`));
                process.exit(1);
            }
            return await resolveProviderAndSigners({
                chainId,
                checkProviders: checkProviders.slice(1),
                privateKey,
                origin,
            });
        }
        if (privateKey) {
            signers.push(...privateKey.split(',').map((k) => {
                const account = (0, accounts_1.privateKeyToAccount)(k);
                return {
                    address: account.address,
                    wallet: viem.createWalletClient({
                        account,
                        chain: (0, chains_1.getChainById)(chainId),
                        transport: viem.custom(publicClient.transport),
                    }),
                };
            }));
        }
        else {
            debug('no signer supplied for provider');
        }
    }
    else {
        debug('use frame eth provider');
        // Use eth-provider wrapped in Web3Provider as default
        try {
            publicClient = viem
                .createPublicClient({
                chain: (0, chains_1.getChainById)(chainId),
                transport: viem.custom(rawProvider),
            })
                .extend(viem.walletActions).extend((0, builder_1.traceActions)({}));
            // Attempt to load from eth-provider
            await rawProvider.enable();
            for (const address of rawProvider.accounts) {
                signers.push({
                    address: address,
                    wallet: publicClient,
                });
            }
        }
        catch (err) {
            if (checkProviders.length <= 1) {
                console.error((0, chalk_1.red)(`Failed to establish a connection with any provider. Please specify a valid RPC url using the ${(0, chalk_1.bold)('--provider-url')} flag.`));
                process.exit(1);
            }
            return await resolveProviderAndSigners({
                chainId,
                checkProviders: checkProviders.slice(1),
                privateKey,
                origin,
            });
        }
    }
    debug(`returning ${signers.length && signers[0].address} signers`);
    return {
        provider: publicClient,
        signers,
    };
}
exports.resolveProviderAndSigners = resolveProviderAndSigners;
//# sourceMappingURL=provider.js.map