"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clean = void 0;
const promises_1 = __importDefault(require("node:fs/promises"));
const node_fs_1 = require("node:fs");
const node_path_1 = __importDefault(require("node:path"));
const debug_1 = __importDefault(require("debug"));
const prompts_1 = __importDefault(require("prompts"));
const settings_1 = require("../settings");
const debug = (0, debug_1.default)('cannon:cli:clean');
async function clean(confirm = true) {
    const settings = (0, settings_1.resolveCliSettings)();
    const folders = ['tags', 'metadata_cache', 'ipfs_cache', 'build_results', 'blobs'].map((dir) => {
        return node_path_1.default.join(settings.cannonDirectory, dir);
    });
    const filesAndDirs = await Promise.all(folders.map(async (dir) => {
        if (!(0, node_fs_1.existsSync)(dir))
            return [];
        const entries = await promises_1.default.readdir(dir, { withFileTypes: true });
        return entries.map((entry) => node_path_1.default.join(dir, entry.name));
    })).then((entries) => entries.flat());
    if (!filesAndDirs.length) {
        console.log('No files or folders found that could be deleted.');
        return false;
    }
    console.log('Found the following files and/or folders for deletion:');
    for (const entry of filesAndDirs)
        console.log(`  - ${entry}`);
    console.log();
    if (confirm) {
        const confirm = await (0, prompts_1.default)({
            type: 'confirm',
            name: 'confirmation',
            message: 'Are you sure you want to delete them?',
            initial: false,
        });
        if (!confirm.confirmation)
            return false;
    }
    await Promise.all(filesAndDirs.map(async (entry) => {
        try {
            debug(`removing entry: ${entry}`);
            await promises_1.default.rm(entry, { recursive: true });
        }
        catch (error) {
            if (error instanceof Error) {
                debug(`error removing entry ${entry}: ${error.message}`);
            }
            else {
                debug('An error has occurred');
            }
        }
    }));
    return true;
}
exports.clean = clean;
//# sourceMappingURL=clean.js.map