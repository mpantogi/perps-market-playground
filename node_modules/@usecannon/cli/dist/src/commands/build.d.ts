import { CannonRegistry, ChainArtifacts, ChainBuilderRuntime, ChainDefinition, ContractArtifact } from '@usecannon/builder';
import { CannonSigner } from '@usecannon/builder/src';
import * as viem from 'viem';
import { PackageSpecification } from '../types';
interface Params {
    provider: viem.PublicClient;
    def?: ChainDefinition;
    packageDefinition: PackageSpecification;
    upgradeFrom?: string;
    pkgInfo: any;
    getArtifact?: (name: string) => Promise<ContractArtifact>;
    getSigner?: (addr: viem.Address) => Promise<CannonSigner>;
    getDefaultSigner?: () => Promise<CannonSigner>;
    projectDirectory?: string;
    presetArg?: string;
    overrideResolver?: CannonRegistry;
    wipe?: boolean;
    persist?: boolean;
    plugins?: boolean;
    publicSourceCode?: boolean;
    providerUrl?: string;
    registryPriority?: 'local' | 'onchain' | 'offline';
    gasPrice?: string;
    gasFee?: string;
    priorityGasFee?: string;
}
export declare function build({ provider, def, packageDefinition, upgradeFrom, pkgInfo, getArtifact, getSigner, getDefaultSigner, presetArg, overrideResolver, wipe, persist, plugins, publicSourceCode, providerUrl, registryPriority, gasPrice, gasFee, priorityGasFee, }: Params): Promise<{
    outputs: ChainArtifacts;
    provider: viem.PublicClient;
    runtime: ChainBuilderRuntime;
}>;
export {};
//# sourceMappingURL=build.d.ts.map