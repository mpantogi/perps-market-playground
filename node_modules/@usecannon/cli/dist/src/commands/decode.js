"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decode = void 0;
const viem = __importStar(require("viem"));
const chalk_1 = require("chalk");
const builder_1 = require("@usecannon/builder");
const settings_1 = require("../../src/settings");
const package_1 = require("../package");
const helpers_1 = require("../helpers");
async function decode({ packageRef, data, chainId, presetArg, json = false, }) {
    if (!data[0].startsWith('0x')) {
        data[0] = ('0x' + data[0]);
    }
    // Handle deprecated preset specification
    if (presetArg) {
        console.warn((0, chalk_1.yellow)((0, chalk_1.bold)('The --preset option will be deprecated soon. Reference presets in the package reference using the format name:version@preset')));
        packageRef = packageRef.split('@')[0] + `@${presetArg}`;
    }
    const deployInfos = await (0, package_1.readDeployRecursive)(packageRef, chainId);
    const abis = deployInfos.flatMap((deployData) => _getAbis(deployData));
    const parsed = _parseData(abis, data);
    if (!parsed) {
        const errorMessage = (0, builder_1.decodeTxError)(data[0], abis);
        if (errorMessage) {
            console.log(errorMessage);
            return;
        }
        throw new Error('Could not decode transaction data');
    }
    const fragment = viem.getAbiItem({
        abi: parsed.abi,
        args: parsed.result.args,
        name: parsed.result.functionName ||
            parsed.result.errorName ||
            parsed.result.eventName ||
            '',
    });
    if (json || !fragment) {
        return console.log(JSON.stringify(parsed.result, null, 2));
    }
    const sighash = (0, helpers_1.getSighash)(fragment);
    console.log();
    console.log((0, chalk_1.green)(`${(0, helpers_1.formatAbiFunction)(fragment)}`), `${sighash ? (0, chalk_1.italic)((0, chalk_1.gray)(sighash)) : ''}`);
    if (parsed.result.errorName) {
        const errorMessage = (0, builder_1.decodeTxError)(data[0], abis);
        if (errorMessage) {
            console.log(errorMessage);
            return;
        }
    }
    const renderParam = (prefix, input) => `${prefix}${(0, chalk_1.gray)(input.type)} ${(0, chalk_1.bold)(input.name)}`;
    const renderArgs = (input, value, offset = '  ') => {
        switch (true) {
            case input.type.startsWith('tuple'): {
                // e.g. tuple, tuple[]
                console.log(renderParam(offset, input));
                // @ts-ignore: TODO - figure out how to type this
                const components = input.components;
                const values = input.type.endsWith('[]') ? value.map(Object.values) : [value];
                for (const v of values) {
                    for (let i = 0; i < components.length; i++) {
                        renderArgs({
                            ...components[i],
                            name: `[${i}]`,
                        }, v[i], offset.repeat(2));
                    }
                    console.log();
                }
                break;
            }
            case input.type.endsWith('[]'): {
                //e.g. uint256[], bool[], bytes[], bytes8[], bytes32[], etc
                console.log(renderParam(offset, input));
                for (let i = 0; i < value.length; i++) {
                    renderArgs({
                        name: `[${i}]`,
                        internalType: input.internalType?.replace('[]', ''),
                        type: input.type?.replace('[]', ''),
                    }, value[i], offset.repeat(2));
                }
                break;
            }
            default: {
                console.log(renderParam(offset, input), _renderValue(input, value));
            }
        }
    };
    if (parsed.result.args) {
        for (let index = 0; index < parsed.result.args.length; index++) {
            renderArgs(fragment.inputs[index], parsed.result.args[index]);
        }
    }
    console.log();
}
exports.decode = decode;
function _getAbis(deployData) {
    return Object.values(deployData.state)
        .flatMap((step) => Object.values(step.artifacts?.contracts || {}))
        .map((artifact) => artifact.abi);
}
function _renderValue(type, value) {
    switch (true) {
        case typeof value == 'bigint':
            return value.toString();
        case type.type === 'address':
            return viem.getAddress(value);
        case type.type == 'bool':
            return typeof value == 'string' && value.startsWith('0x') ? viem.hexToBool(value) : value;
        case type.type.startsWith('bytes'):
            try {
                return viem.hexToString(value, { size: 32 });
            }
            catch (err) {
                const settings = (0, settings_1.resolveCliSettings)();
                if (settings.trace) {
                    console.error(err);
                }
            }
            return `"${value}"`;
        default:
            return `"${value}"`;
    }
}
function _parseData(abis, data) {
    if (data.length === 0)
        return null;
    for (const abi of abis) {
        const result = _try(() => viem.decodeErrorResult({ abi, data: data[0] })) ||
            _try(() => viem.decodeFunctionData({ abi, data: data[0] })) ||
            _try(() => viem.decodeEventLog({
                abi,
                topics: (data.length > 1 ? data.slice(0, -1) : data),
                data: data.length > 1 ? data[data.length - 1] : '0x',
            }));
        if (result)
            return { abi, result };
    }
    return null;
}
function _try(fn) {
    try {
        return fn();
    }
    catch (err) {
        return null;
    }
}
//# sourceMappingURL=decode.js.map