"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const helpers_1 = require("../helpers");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const untildify_1 = __importDefault(require("untildify"));
const prompts_1 = __importDefault(require("prompts"));
const constants_1 = require("../constants");
const settings_1 = require("../settings");
const lodash_1 = __importDefault(require("lodash"));
const chalk_1 = require("chalk");
async function setup() {
    // Setup Anvil
    await (0, helpers_1.setupAnvil)();
    const settings = (0, settings_1.resolveCliSettings)();
    const cliSettingsStore = (0, untildify_1.default)(path_1.default.join(settings.cannonDirectory, constants_1.CLI_SETTINGS_STORE));
    // Exit if settings is already configured
    if (settings.cannonSettings) {
        console.log('Your Cannon settings are being explicitly defined as follows:');
        console.log(JSON.stringify(settings.cannonSettings));
        return;
    }
    console.log('Cannon’s settings are optional. They can be defined in a JSON file and overridden with environment variables.\n');
    console.log(`This will update your settings stored in ${cliSettingsStore}`);
    const configExists = fs_extra_1.default.existsSync(cliSettingsStore);
    let fileSettings = configExists ? fs_extra_1.default.readJsonSync(cliSettingsStore) : {};
    Object.entries(fileSettings).map(([k, v]) => console.log(`${(0, chalk_1.gray)('›')} ${(0, chalk_1.bold)(k)} - ${v}`));
    console.log('');
    const questions = [
        {
            type: 'text',
            name: 'publishIpfsUrl',
            message: 'Enter an IPFS URL for uploading packages when using the publish and pin commands (instead of the Cannon IPFS cluster)\n',
            initial: fileSettings.publishIpfsUrl,
        },
        {
            type: 'text',
            name: 'ipfsUrl',
            message: 'Enter an IPFS URL for reading package data (in addition to the Cannon IPFS cluster)\n',
            initial: fileSettings.ipfsUrl,
        },
        {
            type: 'text',
            name: 'writeIpfsUrl',
            message: 'Enter an IPFS URL for writing package data during builds (in addition to your local filesystem)\n',
            initial: fileSettings.writeIpfsUrl,
        },
    ];
    const response = await (0, prompts_1.default)(questions, {
        onCancel: () => {
            console.log((0, chalk_1.bold)('Aborting...'));
            console.log((0, chalk_1.yellow)((0, chalk_1.italic)('No changes were made to your configuration.')));
            process.exit(0);
        },
    });
    if (response.publishIpfsUrl) {
        fileSettings.publishIpfsUrl = response.publishIpfsUrl;
    }
    if (response.ipfsUrl) {
        fileSettings.ipfsUrl = response.ipfsUrl;
    }
    if (response.writeIpfsUrl) {
        fileSettings.writeIpfsUrl = response.writeIpfsUrl;
    }
    console.log(`\nSaving ${cliSettingsStore}`);
    fileSettings = lodash_1.default.omitBy(fileSettings, lodash_1.default.isEmpty);
    await fs_extra_1.default.mkdirp(path_1.default.dirname(cliSettingsStore));
    fs_extra_1.default.writeFileSync(cliSettingsStore, JSON.stringify(fileSettings), 'utf8');
    console.log((0, chalk_1.green)('Cannon settings updated successfully'));
}
exports.setup = setup;
//# sourceMappingURL=setup.js.map