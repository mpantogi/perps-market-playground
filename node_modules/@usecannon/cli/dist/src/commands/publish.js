"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publish = void 0;
const builder_1 = require("@usecannon/builder");
const chalk_1 = require("chalk");
const prompts_1 = __importDefault(require("prompts"));
const viem = __importStar(require("viem"));
const loader_1 = require("../loader");
const registry_1 = require("../registry");
async function publish({ packageRef, cliSettings, onChainRegistry, tags = ['latest'], chainId, presetArg, quiet = false, includeProvisioned = true, skipConfirm = false, }) {
    const { fullPackageRef } = new builder_1.PackageReference(packageRef);
    // Handle deprecated preset specification
    if (presetArg && !packageRef.startsWith('@')) {
        console.warn((0, chalk_1.yellow)((0, chalk_1.bold)('The --preset option will be deprecated soon. Reference presets in the package reference using the format name:version@preset')));
        packageRef = packageRef.split('@')[0] + `@${presetArg}`;
    }
    if (onChainRegistry instanceof builder_1.OnChainRegistry) {
        if (!onChainRegistry.signer) {
            throw new Error('signer not provided in registry');
        }
        if (!quiet) {
            console.log((0, chalk_1.blueBright)(`Publishing with ${onChainRegistry.signer.address}`));
            console.log();
        }
    }
    // Generate CannonStorage to publish ipfs remotely and write to the registry
    const toStorage = new builder_1.CannonStorage(onChainRegistry, {
        ipfs: new builder_1.IPFSLoader(cliSettings.publishIpfsUrl || (0, builder_1.getCannonRepoRegistryUrl)()),
    });
    // Generate CannonStorage to retrieve the local instance of the package
    const localRegistry = new registry_1.LocalRegistry(cliSettings.cannonDirectory);
    const fromStorage = new builder_1.CannonStorage(localRegistry, (0, loader_1.getMainLoader)(cliSettings));
    // if the package reference doesnt contain a version reference we still want to scan deploys without it.
    // This works as a catch all to get any deployment stored locally.
    // However if a version is passed, we use the basePackageRef to extrapolate and remove any potential preset in the reference.
    let deploys;
    if (packageRef.startsWith('@')) {
        deploys = [{ name: packageRef, chainId: 13370 }];
    }
    else {
        // Check for deployments that are relevant to the provided packageRef
        deploys = await localRegistry.scanDeploys(packageRef, chainId);
    }
    if (!deploys || deploys.length === 0) {
        throw new Error(`Could not find any deployments for ${fullPackageRef} with chain id ${chainId}. If you have the IPFS hash of the deployment data, use the fetch command. Otherwise, rebuild the package.`);
    }
    // Select screen for when a user is looking for all the local deploys
    if (!skipConfirm && deploys.length > 1) {
        const prompt = await (0, prompts_1.default)({
            type: 'select',
            message: 'Select the package you want to publish:\n',
            name: 'value',
            choices: deploys.map((d) => {
                const { fullPackageRef } = new builder_1.PackageReference(d.name);
                return {
                    title: `${fullPackageRef} (Chain ID: ${d.chainId})`,
                    description: '',
                    value: d,
                };
            }),
        });
        if (!prompt.value) {
            console.log('You must select a package to publish');
            process.exit(1);
        }
        tags = tags.filter((t) => t !== new builder_1.PackageReference(prompt.value.name).version);
        deploys = [prompt.value];
    }
    // Doing some filtering on deploys list so that we can iterate over every "duplicate" package which has more than one version being deployed.
    const deployNames = deploys.map((deploy) => {
        const { name, version, preset } = new builder_1.PackageReference(deploy.name);
        return { name, version, preset, chainId: deploy.chainId };
    });
    // "dedupe" the deploys so that when we iterate we can go over every package deployment by version
    const parentPackages = deployNames.reduce((result, item) => {
        const matchingDeploys = result.find((i) => i.name === item.name && i.preset === item.preset);
        if (matchingDeploys) {
            matchingDeploys.versions.push(item.version);
        }
        else {
            result.push({ name: item.name, versions: [item.version], chainId: item.chainId, preset: item.preset });
        }
        return result;
    }, []);
    const publishCalls = [];
    for (const pkg of parentPackages) {
        const publishTags = pkg.versions.concat(tags);
        const calls = await (0, builder_1.preparePublishPackage)({
            packageRef: builder_1.PackageReference.from(pkg.name, pkg.versions[0], pkg.preset).fullPackageRef,
            chainId: deploys[0].chainId,
            fromStorage,
            toStorage,
            tags: publishTags,
            includeProvisioned,
        });
        publishCalls.push(...calls);
    }
    if (!skipConfirm) {
        for (const publishCall of publishCalls) {
            const packageName = new builder_1.PackageReference(publishCall.packagesNames[0]).name;
            console.log((0, chalk_1.blueBright)(`\nThis will publish ${(0, chalk_1.bold)(packageName)} to the registry:`));
            for (const fullPackageRef of publishCall.packagesNames) {
                const { version, preset } = new builder_1.PackageReference(fullPackageRef);
                console.log(` - ${version} (preset: ${preset})`);
            }
        }
        console.log('\n');
        if (onChainRegistry instanceof builder_1.OnChainRegistry) {
            const totalFees = await onChainRegistry.calculatePublishingFee(publishCalls.length);
            console.log(`Total publishing fees: ${viem.formatEther(totalFees)} ETH`);
            console.log();
            if (totalFees > 0n &&
                totalFees >= (await onChainRegistry.provider.getBalance({ address: onChainRegistry.signer.address }))) {
                throw new Error('you do not appear to have enough ETH in your wallet to publish');
            }
        }
        const verification = await (0, prompts_1.default)({
            type: 'confirm',
            name: 'confirmation',
            message: 'Proceed?',
            initial: true,
        });
        if (!verification.confirmation) {
            console.log('Cancelled');
            process.exit(1);
        }
    }
    console.log((0, chalk_1.bold)('Publishing package...'));
    console.log((0, chalk_1.gray)('This may take a few minutes.'));
    console.log();
    const registrationReceipts = await toStorage.registry.publishMany(publishCalls);
    if (!quiet) {
        console.log((0, chalk_1.blueBright)('Transactions:'));
        for (const tx of registrationReceipts)
            console.log(`  - ${tx}`);
    }
}
exports.publish = publish;
//# sourceMappingURL=publish.js.map