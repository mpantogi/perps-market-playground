"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const builder_1 = require("@usecannon/builder");
const lodash_1 = __importDefault(require("lodash"));
const viem = __importStar(require("viem"));
const accounts_1 = require("viem/accounts");
const chalk_1 = require("chalk");
const helpers_1 = require("../helpers");
const loader_1 = require("../loader");
const on_keypress_1 = __importDefault(require("../util/on-keypress"));
const settings_1 = require("../settings");
const constants_1 = require("../constants");
const rpc_1 = require("../rpc");
const registry_1 = require("../registry");
const contracts_recursive_1 = require("../util/contracts-recursive");
const build_1 = require("./build");
const interact_1 = require("./interact");
const INITIAL_INSTRUCTIONS = (0, chalk_1.green)(`Press ${(0, chalk_1.bold)('h')} to see help information for this command.`);
const INSTRUCTIONS = (0, chalk_1.green)(`Press ${(0, chalk_1.bold)('a')} to toggle displaying the logs from your local node.\nPress ${(0, chalk_1.bold)('i')} to interact with contracts via the command line.\nPress ${(0, chalk_1.bold)('v')} to toggle display verbosity of transaction traces as they run.`);
async function run(packages, options) {
    await (0, helpers_1.setupAnvil)();
    // Start the rpc server
    const node = options.node;
    const provider = (0, rpc_1.getProvider)(node);
    const nodeLogging = await createLoggingInterface(node);
    if (options.fundAddresses && options.fundAddresses.length) {
        for (const fundAddress of options.fundAddresses) {
            await provider?.setBalance({ address: fundAddress, value: viem.parseEther('10000') });
        }
    }
    const cliSettings = (0, settings_1.resolveCliSettings)(options);
    const resolver = options.resolver || (await (0, registry_1.createDefaultReadRegistry)(cliSettings));
    const buildOutputs = [];
    const signers = [];
    // set up signers
    const accounts = cliSettings.privateKey
        ? cliSettings.privateKey.split(',').map((pk) => (0, accounts_1.privateKeyToAccount)(pk).address)
        : (options.impersonate || constants_1.ANVIL_FIRST_ADDRESS).split(',');
    for (const addr of accounts) {
        await provider.impersonateAccount({ address: addr });
        await provider.setBalance({ address: addr, value: viem.parseEther('10000') });
        signers.push({ address: addr, wallet: provider });
    }
    const chainId = await provider.getChainId();
    const basicRuntime = new builder_1.ChainBuilderRuntime({
        provider: provider,
        chainId,
        async getSigner(addr) {
            // on test network any user can be conjured
            await provider.impersonateAccount({ address: addr });
            await provider.setBalance({ address: addr, value: viem.parseEther('10000') });
            return { address: addr, wallet: provider };
        },
        snapshots: chainId === builder_1.CANNON_CHAIN_ID,
        allowPartialDeploy: false,
    }, resolver, (0, loader_1.getMainLoader)(cliSettings));
    for (const pkg of packages) {
        const { name, version } = pkg;
        let { preset } = pkg;
        // Handle deprecated preset specification
        if (options.presetArg) {
            console.warn((0, chalk_1.yellow)((0, chalk_1.bold)('The --preset option will be deprecated soon. Reference presets in the package reference using the format name:version@preset')));
            preset = options.presetArg;
            pkg.preset = preset;
        }
        const { fullPackageRef } = builder_1.PackageReference.from(name, version, preset);
        if (options.build || (pkg.settings && Object.keys(pkg.settings).length > 0)) {
            const { outputs } = await (0, build_1.build)({
                ...options,
                packageDefinition: pkg,
                provider,
                overrideResolver: resolver,
                upgradeFrom: options.upgradeFrom,
                persist: false,
            });
            buildOutputs.push({ pkg, outputs });
        }
        else {
            // just get outputs
            const deployData = await basicRuntime.readDeploy(fullPackageRef, basicRuntime.chainId);
            if (!deployData) {
                throw new Error(`deployment not found: ${fullPackageRef}. please make sure it exists for the network ${basicRuntime.chainId}`);
            }
            const outputs = await (0, builder_1.getOutputs)(basicRuntime, new builder_1.ChainDefinition(deployData.def), deployData.state);
            if (!outputs) {
                throw new Error(`no cannon build found for chain ${basicRuntime.chainId}/${preset}. Did you mean to run instead?`);
            }
            buildOutputs.push({ pkg, outputs });
        }
        console.log((0, chalk_1.greenBright)(`${(0, chalk_1.bold)(`${name}:${version}@${preset}`)} has been deployed to a local node.`));
        if (node.forkProvider) {
            console.log((0, chalk_1.gray)('Running from fork provider'));
        }
    }
    if (!signers.length) {
        console.warn((0, chalk_1.yellow)('\nWARNING: no signers resolved. Specify signers with --mnemonic or --private-key (or use --impersonate if on a fork).'));
    }
    if (options.logs) {
        await new Promise(() => {
            console.log('Displaying node logs.....');
            nodeLogging.enable();
        });
    }
    const mergedOutputs = buildOutputs.length == 1
        ? buildOutputs[0].outputs
        : {
            imports: lodash_1.default.fromPairs(lodash_1.default.entries(lodash_1.default.map(buildOutputs, 'outputs'))),
        };
    let traceLevel = 0;
    async function debugTracing(blockInfo) {
        if (traceLevel == 0) {
            return;
        }
        const bwt = await provider.getBlock({ blockNumber: blockInfo.number, includeTransactions: true });
        for (const txn of bwt.transactions) {
            try {
                const traces = (await provider.request({
                    method: 'trace_transaction',
                    params: [txn.hash],
                }));
                let renderedTrace = (0, builder_1.renderTrace)(mergedOutputs, traces);
                if (traceLevel === 1) {
                    // only show lines containing `console.log`s, and prettify
                    renderedTrace = renderedTrace
                        .split('\n')
                        .filter((l) => l.includes('console.log('))
                        .map((l) => l.trim())
                        .join('\n');
                }
                if (renderedTrace) {
                    console.log(`trace: ${txn.hash}`);
                    console.log(renderedTrace);
                    console.log();
                }
            }
            catch (err) {
                console.log('could not render trace for transaction:', err);
            }
        }
    }
    // TODO: once again types from docs do not work here for some reason
    provider.watchBlocks({ onBlock: debugTracing });
    if (options.nonInteractive) {
        await new Promise(() => {
            console.log((0, chalk_1.gray)('Non-interactive mode enabled. Press Ctrl+C to exit.'));
        });
    }
    else {
        console.log();
        console.log(INITIAL_INSTRUCTIONS);
        console.log(INSTRUCTIONS);
        await (0, on_keypress_1.default)(async (evt, { pause, stop }) => {
            if (evt.ctrl && evt.name === 'c') {
                stop();
                process.exit();
            }
            else if (evt.name === 'a') {
                // Toggle showAnvilLogs when the user presses "a"
                if (nodeLogging.enabled()) {
                    console.log((0, chalk_1.gray)('Paused anvil logs...'));
                    console.log(INSTRUCTIONS);
                    nodeLogging.disable();
                }
                else {
                    console.log((0, chalk_1.gray)('Unpaused anvil logs...'));
                    nodeLogging.enable();
                }
            }
            else if (evt.name === 'i') {
                if (nodeLogging.enabled())
                    return;
                await pause(async () => {
                    const [signer] = signers;
                    const contracts = buildOutputs.map((info) => (0, contracts_recursive_1.getContractsRecursive)(info.outputs));
                    await (0, interact_1.interact)({
                        packages,
                        packagesArtifacts: buildOutputs.map((info) => info.outputs),
                        contracts,
                        signer,
                        provider,
                    });
                });
                console.log(INITIAL_INSTRUCTIONS);
                console.log(INSTRUCTIONS);
            }
            else if (evt.name == 'v') {
                // Toggle showAnvilLogs when the user presses "a"
                if (traceLevel === 0) {
                    traceLevel = 1;
                    console.log((0, chalk_1.gray)('Enabled display of console.log events from transactions...'));
                }
                else if (traceLevel === 1) {
                    traceLevel = 2;
                    console.log((0, chalk_1.gray)('Enabled display of full transaction logs...'));
                }
                else {
                    traceLevel = 0;
                    console.log((0, chalk_1.gray)('Disabled transaction tracing...'));
                }
            }
            else if (evt.name === 'h') {
                if (nodeLogging.enabled())
                    return;
                if (options.helpInformation)
                    console.log('\n' + options.helpInformation);
                console.log();
                console.log(INSTRUCTIONS);
            }
        });
    }
}
exports.run = run;
async function createLoggingInterface(node) {
    let enabled = false;
    let outputBuffer = '';
    node.stdout.on('data', (rawChunk) => {
        const chunk = rawChunk.toString('utf8');
        const newData = chunk
            .split('\n')
            .map((m) => {
            return (0, chalk_1.gray)('anvil: ') + m;
        })
            .join('\n');
        if (enabled) {
            console.log(newData);
        }
        else {
            outputBuffer += '\n' + newData;
        }
    });
    const logging = {
        enabled: () => enabled,
        enable: () => {
            if (outputBuffer) {
                console.log(outputBuffer);
                outputBuffer = '';
            }
            enabled = true;
        },
        disable: () => {
            enabled = false;
        },
    };
    return logging;
}
//# sourceMappingURL=run.js.map