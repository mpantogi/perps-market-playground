"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStepsStream = void 0;
const node_stream_1 = require("node:stream");
const builder_1 = require("@usecannon/builder");
const viem = __importStar(require("viem"));
/**
 * Create an event stream from step execution events from the ChainBuilderRuntime
 */
function createStepsStream(runtime) {
    // Listen to step execution events and parse them as DumpLines
    const stream = new StepEventsStream(runtime);
    const getTransaction = async (hash) => {
        return viem.withTimeout(() => {
            return runtime.provider.getTransaction({ hash });
        }, {
            timeout: 15000,
            errorInstance: new Error(`TimeoutError: Could not get transaction "${hash}"`),
        });
    };
    // Asynchronically fetch for transactions executed by the step (contract deployments and method calls)
    const fetchTransactions = new node_stream_1.Transform({
        objectMode: true,
        async transform(line, _, cb) {
            // get the transaction hashes
            const txHashes = [
                ...Object.values(line.result?.txns || {}).map((tx) => tx.hash),
                ...Object.values(line.result?.contracts || {}).map((c) => c.deployTxnHash),
            ].filter((hash) => !!hash);
            line.txns = await Promise.all(txHashes.map((hash) => getTransaction(hash)));
            this.push(line);
            cb();
        },
    });
    return { stream, fetchTransactions };
}
exports.createStepsStream = createStepsStream;
class StepEventsStream extends node_stream_1.Readable {
    constructor(runtime) {
        super({ objectMode: true });
        this.runtime = runtime;
    }
    _construct(cb) {
        const handlePreStepExecute = (type, label, step, depth) => {
            if (type === 'clone') {
                this.push({ type, label, depth, step, txns: [] });
            }
        };
        const handlePostStepExecute = (type, label, step, ctx, result, depth) => {
            this.push({ type, label, depth, step, result, txns: [] });
        };
        this.runtime.on(builder_1.Events.PreStepExecute, handlePreStepExecute);
        this.runtime.on(builder_1.Events.PostStepExecute, handlePostStepExecute);
        this.on('end', () => {
            this.runtime.off(builder_1.Events.PreStepExecute, handlePreStepExecute);
            this.runtime.off(builder_1.Events.PostStepExecute, handlePostStepExecute);
        });
        cb();
    }
    _read() {
        // allow null
    }
    end() {
        this.push(null);
    }
}
//# sourceMappingURL=stream-steps.js.map