"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWriteScript = exports.WRITE_SCRIPT_FORMATS = void 0;
const node_fs_1 = require("node:fs");
const promises_1 = require("node:stream/promises");
const fs_extra_1 = require("fs-extra");
const viem = __importStar(require("viem"));
const stream_steps_1 = require("./stream-steps");
exports.WRITE_SCRIPT_FORMATS = ['json', 'ethers'];
/**
 * Listen for the steps executed by the given runtime and generate a file
 * with all of them on the given format.
 */
async function createWriteScript(runtime, targetFile, format = 'json') {
    if (!exports.WRITE_SCRIPT_FORMATS.includes(format)) {
        throw new Error(`Invalid build dump format "${format}"`);
    }
    (0, fs_extra_1.ensureFileSync)(targetFile);
    const createRenderer = (await Promise.resolve(`${`./render-${format}`}`).then(s => __importStar(require(s)))).createRenderer;
    const events = (0, stream_steps_1.createStepsStream)(runtime);
    const stream = events.stream // Listen for step execution events
        .pipe(events.fetchTransactions) // asynchronically add the executed transactions
        .pipe(createRenderer()) // render step lines into the desired format
        .pipe((0, node_fs_1.createWriteStream)(targetFile)); // save to file
    return {
        end: async () => {
            // The runtime does not have an event to notify when the build has finished
            // so, we have to manully stop listening to it and close the streams.
            events.stream.end();
            await viem.withTimeout(() => (0, promises_1.finished)(stream), {
                timeout: 10000,
                errorInstance: new Error('stream timed out'),
            });
        },
    };
}
exports.createWriteScript = createWriteScript;
//# sourceMappingURL=write.js.map