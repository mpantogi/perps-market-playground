/// <reference types="node" />
import { ChildProcess } from 'node:child_process';
import * as viem from 'viem';
import { AnvilOptions } from './util/anvil';
export type RpcOptions = {
    forkProvider?: viem.PublicClient;
    forkBlockNumber?: number;
    timestamp?: number;
};
export type CannonRpcNode = ChildProcess & RpcOptions & {
    host: string;
    port: number;
    chainId: number;
};
declare let anvilProvider: (viem.PublicClient & viem.WalletClient & viem.TestClient) | null;
export declare const versionCheck: () => Promise<void>;
export declare function runRpc(anvilOptions: AnvilOptions, rpcOptions?: RpcOptions): Promise<CannonRpcNode>;
export declare function getProvider(expectedAnvilInstance: ChildProcess): typeof anvilProvider;
export declare function createProviderProxy(provider: viem.Client): Promise<string>;
export {};
//# sourceMappingURL=rpc.d.ts.map