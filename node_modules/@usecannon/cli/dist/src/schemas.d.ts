import { z } from 'zod';
export declare const runSchema: z.ZodObject<z.objectUtil.extendShape<{
    /** The javascript (or typescript) file to load  */
    exec: z.ZodString;
    /** The function to call in this file  */
    func: z.ZodString;
    /**
     * An array of files and directories that this script depends on.
     * The cache of the cannonfile's build is recreated when these files change.
     */
    modified: z.ZodArray<z.ZodString, "atleastone">;
    /**
     * The artifacts that are generated by this script. Should be in the format (example): `contracts.FooBar`
     */
    outputs: z.ZodArray<z.ZodString, "many">;
}, {
    args: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    env: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    depends: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
}>, "strip", z.ZodTypeAny, {
    outputs: string[];
    func: string;
    exec: string;
    modified: [string, ...string[]];
    args?: string[] | undefined;
    depends?: string[] | undefined;
    env?: string[] | undefined;
}, {
    outputs: string[];
    func: string;
    exec: string;
    modified: [string, ...string[]];
    args?: string[] | undefined;
    depends?: string[] | undefined;
    env?: string[] | undefined;
}>;
//# sourceMappingURL=schemas.d.ts.map