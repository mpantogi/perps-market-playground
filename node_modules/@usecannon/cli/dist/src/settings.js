"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveCliSettings = void 0;
const debug_1 = __importDefault(require("debug"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const untildify_1 = __importDefault(require("untildify"));
const viem = __importStar(require("viem"));
const znv_1 = require("znv");
const zod_1 = require("zod");
const builder_1 = require("@usecannon/builder");
const constants_1 = require("./constants");
const helpers_1 = require("./helpers");
const debug = (0, debug_1.default)('cannon:cli:settings');
/**
 * Settings zod schema.
 * Check env vars and set default values if needed
 */
function cannonSettingsSchema(fileSettings) {
    return {
        CANNON_DIRECTORY: zod_1.z.string().default(constants_1.DEFAULT_CANNON_DIRECTORY),
        CANNON_SETTINGS: zod_1.z.string().optional(),
        CANNON_PROVIDER_URL: zod_1.z.string().default(fileSettings.providerUrl || 'frame,direct'),
        CANNON_PRIVATE_KEY: zod_1.z
            .string()
            .optional()
            .default(fileSettings.privateKey),
        CANNON_IPFS_TIMEOUT: zod_1.z
            .number()
            .optional()
            .default(fileSettings.ipfsTimeout || 300000),
        CANNON_IPFS_RETRIES: zod_1.z
            .number()
            .optional()
            .default(fileSettings.ipfsRetries || 3),
        CANNON_IPFS_URL: zod_1.z
            .string()
            .optional()
            .default(fileSettings.ipfsUrl || ''),
        CANNON_WRITE_IPFS_URL: zod_1.z
            .string()
            .optional()
            .default(fileSettings.writeIpfsUrl || ''),
        CANNON_PUBLISH_IPFS_URL: zod_1.z
            .string()
            .url()
            .optional()
            .default(fileSettings.publishIpfsUrl),
        CANNON_REGISTRY_PROVIDER_URL: zod_1.z.string().url().optional(),
        CANNON_REGISTRY_CHAIN_ID: zod_1.z.string().optional(),
        CANNON_REGISTRY_ADDRESS: zod_1.z
            .string()
            .optional()
            .refine((v) => !v || viem.isAddress(v), 'must be address'),
        CANNON_REGISTRY_PRIORITY: zod_1.z.enum(['onchain', 'local', 'offline']).default(fileSettings.registryPriority || 'onchain'),
        CANNON_ETHERSCAN_API_URL: zod_1.z
            .string()
            .url()
            .optional()
            .default(fileSettings.etherscanApiUrl),
        CANNON_ETHERSCAN_API_KEY: zod_1.z.string().length(34).optional().default(fileSettings.etherscanApiKey),
        CANNON_QUIET: zod_1.z.boolean().default(fileSettings.quiet || false),
        CANNON_E2E: zod_1.z.boolean().default(false),
        TRACE: zod_1.z.boolean().default(false),
    };
}
function _resolveCliSettings(overrides = {}) {
    const cliSettingsStore = (0, untildify_1.default)(path_1.default.join(process.env.CANNON_DIRECTORY || constants_1.DEFAULT_CANNON_DIRECTORY, constants_1.CLI_SETTINGS_STORE));
    let fileSettings;
    if (process.env.CANNON_SETTINGS) {
        fileSettings = JSON.parse(process.env.CANNON_SETTINGS);
    }
    else {
        fileSettings = fs_extra_1.default.existsSync(cliSettingsStore) ? fs_extra_1.default.readJsonSync(cliSettingsStore) : {};
    }
    const { CANNON_DIRECTORY, CANNON_SETTINGS, CANNON_PROVIDER_URL, CANNON_PRIVATE_KEY, CANNON_IPFS_TIMEOUT, CANNON_IPFS_RETRIES, CANNON_IPFS_URL, CANNON_WRITE_IPFS_URL, CANNON_PUBLISH_IPFS_URL, CANNON_REGISTRY_PROVIDER_URL, CANNON_REGISTRY_CHAIN_ID, CANNON_REGISTRY_ADDRESS, CANNON_REGISTRY_PRIORITY, CANNON_ETHERSCAN_API_URL, CANNON_ETHERSCAN_API_KEY, CANNON_QUIET, CANNON_E2E, TRACE, } = (0, znv_1.parseEnv)(process.env, cannonSettingsSchema(fileSettings));
    const finalSettings = lodash_1.default.assign({
        cannonDirectory: (0, untildify_1.default)(CANNON_DIRECTORY),
        cannonSettings: CANNON_SETTINGS,
        providerUrl: CANNON_PROVIDER_URL,
        privateKey: CANNON_PRIVATE_KEY,
        ipfsTimeout: CANNON_IPFS_TIMEOUT,
        ipfsRetries: CANNON_IPFS_RETRIES,
        ipfsUrl: CANNON_IPFS_URL,
        writeIpfsUrl: CANNON_WRITE_IPFS_URL,
        publishIpfsUrl: CANNON_PUBLISH_IPFS_URL,
        registries: CANNON_REGISTRY_ADDRESS && (CANNON_REGISTRY_PROVIDER_URL || CANNON_REGISTRY_CHAIN_ID)
            ? [
                {
                    name: 'Custom Network',
                    providerUrl: CANNON_REGISTRY_PROVIDER_URL ? [CANNON_REGISTRY_PROVIDER_URL] : undefined,
                    chainId: CANNON_REGISTRY_CHAIN_ID ? Number(CANNON_REGISTRY_CHAIN_ID) : undefined,
                    address: CANNON_REGISTRY_ADDRESS,
                },
            ]
            : builder_1.DEFAULT_REGISTRY_CONFIG,
        registryPriority: CANNON_REGISTRY_PRIORITY,
        etherscanApiUrl: CANNON_ETHERSCAN_API_URL,
        etherscanApiKey: CANNON_ETHERSCAN_API_KEY,
        quiet: CANNON_QUIET,
        isE2E: CANNON_E2E,
        trace: TRACE,
    }, lodash_1.default.pickBy(overrides));
    // Check and normalize private keys
    finalSettings.privateKey = (0, helpers_1.checkAndNormalizePrivateKey)(finalSettings.privateKey);
    if (overrides.registryAddress && (overrides.registryProviderUrl || overrides.registryChainId)) {
        finalSettings.registries = [
            {
                name: 'Custom Network',
                providerUrl: overrides.registryProviderUrl ? [overrides.registryProviderUrl] : undefined,
                chainId: overrides.registryChainId ? Number(overrides.registryChainId) : undefined,
                address: overrides.registryAddress ? overrides.registryAddress : CANNON_REGISTRY_ADDRESS,
            },
        ];
    }
    debug('final settings:', (0, helpers_1.filterSettings)(finalSettings));
    return finalSettings;
}
exports.resolveCliSettings = lodash_1.default.memoize(_resolveCliSettings);
//# sourceMappingURL=settings.js.map