import _ from 'lodash';
import * as viem from 'viem';
/**
 * Local User Settings for CLI context
 */
export type CliSettings = {
    /**
     * provider used for `build` defaults to 'frame,direct' https://github.com/floating/eth-provider#presets
     */
    providerUrl: string;
    /**
     * private key(s) of default signer that should be used for build, comma separated
     */
    privateKey?: viem.Hex;
    /**
     * The amount of times axios should retry IPFS requests (applies to read and write)
     */
    ipfsRetries?: number;
    /**
     * The interval in seconds that axios should wait before timing out requests
     */
    ipfsTimeout?: number;
    /**
  
     * the url of the IPFS endpoint to use as a storage base, only for reading data
     */
    ipfsUrl?: string;
    /**
     * the url of the IPFS endpoint to use as a storage base, only for writing data
     */
    writeIpfsUrl?: string;
    /**
     * the IPFS url to use when publishing. If you have an IPFS cluster, or a pinning service, this is a good place to put its IPFS Proxy publish endpoint. If not specified, your packages wont be uploaded to remote ipfs.
     */
    publishIpfsUrl?: string;
    /**
     * List of registries that should be read from to find packages.
     * Earlier registries in the array get priority for resolved packages over later ones.
     * First registry on the list is the one that handles setPackageOwnership() calls to create packages.
     */
    registries: {
        chainId?: number;
        name: string;
        providerUrl?: string[];
        address: viem.Address;
    }[];
    /**
     * URL to use to write a package to the registry.
     */
    registryProviderUrl?: string;
    /**
     * chain Id of the registry. Defaults to `1`.
     */
    registryChainId?: string;
    /**
     * Address of the registry.
     */
    registryAddress?: viem.Address;
    /**
     * Which registry to read from first. Defaults to `onchain`
     */
    registryPriority: 'local' | 'onchain' | 'offline';
    /**
     * Directory to load configurations from and for local registry
     */
    cannonDirectory: string;
    /**
     * Settings file to load configurations from
     */
    cannonSettings?: string;
    /**
     * URL of etherscan API for verification
     */
    etherscanApiUrl?: string;
    /**
     * Etherscan API Key for verification
     */
    etherscanApiKey: string;
    /**
     * Whether to run in E2E mode
     */
    isE2E: boolean;
    /**
     * Whether to suppress extra output
     */
    quiet: boolean;
    /**
     * Enable/disable tracing
     */
    trace: boolean;
    /**
     * Gas price to use for transactions
     */
    gasPrice?: string;
    /**
     * Base and Priority gas fee to use for transactions - EIP1559
     */
    gasFee?: string;
    priorityGasFee?: string;
};
declare function _resolveCliSettings(overrides?: Partial<CliSettings>): CliSettings;
export declare const resolveCliSettings: typeof _resolveCliSettings & _.MemoizedFunction;
export {};
//# sourceMappingURL=settings.d.ts.map