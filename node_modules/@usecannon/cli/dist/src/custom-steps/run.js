"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashFs = exports.importFrom = void 0;
const node_module_1 = require("node:module");
const node_path_1 = __importDefault(require("node:path"));
const builder_1 = require("@usecannon/builder");
const crypto_1 = __importDefault(require("crypto"));
const debug_1 = __importDefault(require("debug"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const schemas_1 = require("../schemas");
const debug = (0, debug_1.default)('cannon:builder:run');
/**
 * Try to import a file relative to the given baseDir, if not present, try to
 * get the relative NPM Module.
 * @internal
 */
async function importFrom(baseDir, fileOrModule) {
    try {
        return await Promise.resolve(`${node_path_1.default.resolve(baseDir, fileOrModule)}`).then(s => __importStar(require(s)));
    }
    catch (e) {
        const err = e;
        if (err.code === 'MODULE_NOT_FOUND') {
            const localRequire = (0, node_module_1.createRequire)(baseDir);
            return await Promise.resolve(`${localRequire.resolve(fileOrModule)}`).then(s => __importStar(require(s)));
        }
        throw err;
    }
}
exports.importFrom = importFrom;
function hashFs(path) {
    const dirHasher = crypto_1.default.createHash('sha256');
    // iterate through every file at path and build a checksum
    if (fs_extra_1.default.statSync(path).isFile()) {
        const hasher = crypto_1.default.createHash('sha256');
        dirHasher.update(hasher.update(fs_extra_1.default.readFileSync(path)).digest());
    }
    else {
        const subpaths = fs_extra_1.default.readdirSync(path);
        for (const subpath of subpaths) {
            const fullname = `${path}/${subpath}`;
            dirHasher.update(hashFs(fullname));
        }
    }
    return dirHasher.digest();
}
exports.hashFs = hashFs;
// ensure the specified contract is already deployed
// if not deployed, deploy the specified hardhat contract with specfied options, export address, abi, etc.
// if already deployed, reexport deployment options for usage downstream and exit with no changes
const runAction = {
    label: 'run',
    validate: schemas_1.runSchema,
    timeout: 3600000, // 1 hour, run steps can go for much longer
    async getState(runtime, ctx, config) {
        const newConfig = this.configInject(ctx, config);
        const auxHashes = newConfig.modified.map((pathToScan) => {
            if (!fs_extra_1.default.statSync(pathToScan).isFile() && !fs_extra_1.default.statSync(pathToScan).isDirectory()) {
                throw new Error(`Invalid element in "modified" for "run" operation. Path ${pathToScan} not found.`);
            }
            try {
                return hashFs(pathToScan).toString('hex');
            }
            catch (err) {
                if (err.code === 'ENOENT') {
                    //console.warn(`warning: could not check modified file at path '${pathToScan}'. this may be an error.`);
                    //return 'notfound';
                    // TODO: there is no other way to tell if the runtime state is even supposed to be evaluated other than the existance or not of modified file paths
                    return null;
                }
                else {
                    throw err;
                }
            }
        });
        // also hash the executed file itself
        auxHashes.push(newConfig.exec);
        return [
            {
                auxHashes,
                config: newConfig,
            },
        ];
    },
    configInject(ctx, config) {
        config = lodash_1.default.cloneDeep(config);
        config.exec = lodash_1.default.template(config.exec)(ctx);
        config.modified = lodash_1.default.map(config.modified, (v) => {
            return lodash_1.default.template(v)(ctx);
        });
        if (config.args) {
            config.args = lodash_1.default.map(config.args, (v) => {
                // just convert it to a JSON string when. This will allow parsing of complicated nested structures
                return JSON.parse(JSON.stringify(lodash_1.default.template(v)(ctx)));
            });
        }
        if (config.env) {
            config.env = lodash_1.default.map(config.env, (v) => {
                return lodash_1.default.template(v)(ctx);
            });
        }
        return config;
    },
    getInputs(config) {
        let accesses = (0, builder_1.computeTemplateAccesses)(config.exec);
        lodash_1.default.forEach(config.modified, (a) => (accesses = (0, builder_1.mergeTemplateAccesses)(accesses, (0, builder_1.computeTemplateAccesses)(a))));
        lodash_1.default.forEach(config.args, (a) => (accesses = (0, builder_1.mergeTemplateAccesses)(accesses, (0, builder_1.computeTemplateAccesses)(a))));
        lodash_1.default.forEach(config.env, (a) => (accesses = (0, builder_1.mergeTemplateAccesses)(accesses, (0, builder_1.computeTemplateAccesses)(a))));
        return accesses;
    },
    getOutputs(config) {
        return config.outputs;
    },
    async exec(runtime, ctx, config, packageState) {
        debug('exec', config);
        if (!fs_extra_1.default.statSync(config.exec).isFile()) {
            throw new Error(`Invalid "exec" value for "run" operation. Path "${config.exec}" not found.`);
        }
        const runfile = await importFrom(process.cwd(), config.exec);
        const outputs = (await runfile[config.func](runtime, ...(config.args || [])));
        if (!lodash_1.default.isObject(outputs)) {
            throw new Error('deployed contracts/txns not returned from script. Please supply any deployed contract in contracts property of returned json. If no contracts were deployed or transactions were run, return an empty object.');
        }
        outputs.contracts = lodash_1.default.mapValues(outputs.contracts, (c) => ({
            ...c,
            deployedOn: packageState.currentLabel,
        }));
        outputs.txns = lodash_1.default.mapValues(outputs.txns, (t) => ({
            ...t,
            deployedOn: packageState.currentLabel,
        }));
        return outputs;
    },
};
(0, builder_1.registerAction)(runAction);
//# sourceMappingURL=run.js.map