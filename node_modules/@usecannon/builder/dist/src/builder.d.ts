import { DeploymentState } from './';
import { ChainDefinition } from './definition';
import { ChainBuilderRuntime } from './runtime';
import { BuildOptions, ChainArtifacts, ChainBuilderContext, PackageState } from './types';
export declare function createInitialContext(def: ChainDefinition, pkg: any, chainId: number, opts: BuildOptions): Promise<ChainBuilderContext>;
export declare function build(runtime: ChainBuilderRuntime, def: ChainDefinition, state: DeploymentState, initialCtx: ChainBuilderContext): Promise<DeploymentState>;
export declare function buildLayer(runtime: ChainBuilderRuntime, def: ChainDefinition, baseCtx: ChainBuilderContext, state: DeploymentState, cur: string, tainted?: Set<string>, built?: Map<string, ChainArtifacts>): Promise<void>;
export declare function runStep(runtime: ChainBuilderRuntime, pkgState: PackageState, cfg: any, ctx: ChainBuilderContext): Promise<Partial<Pick<ChainBuilderContext, "contracts" | "imports" | "settings" | "extras" | "txns">>>;
export declare function getArtifacts(def: ChainDefinition, state: DeploymentState): Partial<Pick<ChainBuilderContext, "contracts" | "imports" | "settings" | "extras" | "txns">>;
export declare function getOutputs(runtime: ChainBuilderRuntime, def: ChainDefinition, state: DeploymentState): Promise<ChainArtifacts | null>;
export declare function addOutputsToContext(ctx: ChainBuilderContext, outputs: ChainArtifacts): void;
//# sourceMappingURL=builder.d.ts.map