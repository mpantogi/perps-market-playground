import * as viem from 'viem';
export interface TxData {
    abi: viem.Abi;
    address: viem.Address;
    functionName: string;
    value?: string | bigint | number;
    args?: any[];
}
export declare function prepareMulticall(txns: TxData[]): {
    abi: ({
        inputs: {
            components: ({
                internalType: string;
                name: string;
                type: "address";
            } | {
                internalType: string;
                name: string;
                type: "bytes";
            })[];
            internalType: string;
            name: string;
            type: "tuple[]";
        }[];
        name: string;
        outputs: ({
            internalType: string;
            name: string;
            type: "uint256";
        } | {
            internalType: string;
            name: string;
            type: "bytes[]";
        })[];
        stateMutability: "payable";
        type: "function";
    } | {
        inputs: {
            components: ({
                internalType: string;
                name: string;
                type: "address";
            } | {
                internalType: string;
                name: string;
                type: "bool";
            } | {
                internalType: string;
                name: string;
                type: "uint256";
            } | {
                internalType: string;
                name: string;
                type: "bytes";
            })[];
            internalType: string;
            name: string;
            type: "tuple[]";
        }[];
        name: string;
        outputs: {
            components: ({
                internalType: string;
                name: string;
                type: "bool";
            } | {
                internalType: string;
                name: string;
                type: "bytes";
            })[];
            internalType: string;
            name: string;
            type: "tuple[]";
        }[];
        stateMutability: "payable";
        type: "function";
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: "uint256";
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: "bytes32";
        }[];
        stateMutability: "view";
        type: "function";
    } | {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: "address";
        }[];
        stateMutability: "view";
        type: "function";
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: "address";
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: "uint256";
        }[];
        stateMutability: "view";
        type: "function";
    } | {
        inputs: ({
            internalType: string;
            name: string;
            type: "bool";
            components?: undefined;
        } | {
            components: ({
                internalType: string;
                name: string;
                type: "address";
            } | {
                internalType: string;
                name: string;
                type: "bytes";
            })[];
            internalType: string;
            name: string;
            type: "tuple[]";
        })[];
        name: string;
        outputs: ({
            internalType: string;
            name: string;
            type: "uint256";
            components?: undefined;
        } | {
            internalType: string;
            name: string;
            type: "bytes32";
            components?: undefined;
        } | {
            components: ({
                internalType: string;
                name: string;
                type: "bool";
            } | {
                internalType: string;
                name: string;
                type: "bytes";
            })[];
            internalType: string;
            name: string;
            type: "tuple[]";
        })[];
        stateMutability: "payable";
        type: "function";
    })[];
    address: `0x${string}`;
    functionName: string;
    value: bigint;
    args: {
        target: `0x${string}`;
        callData: `0x${string}`;
        value: string | number | bigint;
        requireSuccess: boolean;
    }[][];
};
//# sourceMappingURL=multicall.d.ts.map