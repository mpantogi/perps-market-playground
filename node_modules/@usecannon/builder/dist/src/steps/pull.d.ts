import { z } from 'zod';
import { ChainBuilderRuntime } from '../runtime';
import { pullSchema } from '../schemas';
import { ChainArtifacts, ChainBuilderContext, ChainBuilderContextWithHelpers, PackageState } from '../types';
/**
 *  Available properties for import operation
 *  @public
 *  @group Import
 */
export type Config = z.infer<typeof pullSchema>;
export interface Outputs {
    [key: string]: string;
}
declare const pullSpec: {
    label: string;
    validate: z.ZodObject<z.objectUtil.extendShape<{
        source: z.ZodEffects<z.ZodString, string, string>;
    }, {
        chainId: z.ZodOptional<z.ZodNumber>;
        preset: z.ZodOptional<z.ZodString>;
        depends: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
    }>, "strip", z.ZodTypeAny, {
        source: string;
        depends?: string[] | undefined;
        chainId?: number | undefined;
        preset?: string | undefined;
    }, {
        source: string;
        depends?: string[] | undefined;
        chainId?: number | undefined;
        preset?: string | undefined;
    }>;
    getState(runtime: ChainBuilderRuntime, ctx: ChainBuilderContextWithHelpers, config: Config): Promise<{
        url: string | null;
    }[]>;
    configInject(ctx: ChainBuilderContextWithHelpers, config: Config): {
        source: string;
        depends?: string[] | undefined;
        chainId?: number | undefined;
        preset?: string | undefined;
    };
    getInputs(config: Config, possibleFields: string[]): import("../access-recorder").AccessComputationResult;
    getOutputs(_: Config, packageState: PackageState): string[];
    exec(runtime: ChainBuilderRuntime, ctx: ChainBuilderContext, config: Config, packageState: PackageState): Promise<ChainArtifacts>;
};
export default pullSpec;
//# sourceMappingURL=pull.d.ts.map