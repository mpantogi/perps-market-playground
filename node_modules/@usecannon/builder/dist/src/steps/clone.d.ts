import { z } from 'zod';
import { ChainBuilderRuntime } from '../runtime';
import { cloneSchema } from '../schemas';
import { ChainArtifacts, ChainBuilderContext, ChainBuilderContextWithHelpers, PackageState } from '../types';
/**
 *  Available properties for clone operation
 *  @public
 *  @group clone
 */
export type Config = z.infer<typeof cloneSchema>;
export interface Outputs {
    [key: string]: string;
}
declare const cloneSpec: {
    label: string;
    validate: z.ZodObject<z.objectUtil.extendShape<{
        source: z.ZodEffects<z.ZodString, string, string>;
    }, {
        chainId: z.ZodOptional<z.ZodNumber>;
        sourcePreset: z.ZodOptional<z.ZodString>;
        target: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        targetPreset: z.ZodOptional<z.ZodString>;
        var: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        options: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        depends: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
    }>, "strip", z.ZodTypeAny, {
        source: string;
        options?: Record<string, string> | undefined;
        depends?: string[] | undefined;
        chainId?: number | undefined;
        target?: string | undefined;
        var?: Record<string, string> | undefined;
        sourcePreset?: string | undefined;
        targetPreset?: string | undefined;
        tags?: string[] | undefined;
    }, {
        source: string;
        options?: Record<string, string> | undefined;
        depends?: string[] | undefined;
        chainId?: number | undefined;
        target?: string | undefined;
        var?: Record<string, string> | undefined;
        sourcePreset?: string | undefined;
        targetPreset?: string | undefined;
        tags?: string[] | undefined;
    }>;
    getState(): Promise<never[]>;
    configInject(ctx: ChainBuilderContextWithHelpers, config: Config, packageState: PackageState): {
        source: string;
        options?: Record<string, string> | undefined;
        depends?: string[] | undefined;
        chainId?: number | undefined;
        target?: string | undefined;
        var?: Record<string, string> | undefined;
        sourcePreset?: string | undefined;
        targetPreset?: string | undefined;
        tags?: string[] | undefined;
    };
    getInputs(config: Config, possibleFields: string[]): import("../access-recorder").AccessComputationResult;
    getOutputs(_: Config, packageState: PackageState): string[];
    exec(runtime: ChainBuilderRuntime, ctx: ChainBuilderContext, config: Config, packageState: PackageState): Promise<ChainArtifacts>;
    timeout: number;
};
export default cloneSpec;
//# sourceMappingURL=clone.d.ts.map