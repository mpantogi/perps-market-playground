import { z } from 'zod';
import { ChainArtifacts, ChainBuilderContext, ChainBuilderRuntimeInfo } from '../types';
/**
 *  Available properties for keeper operation (Not yet implemented)
 *  @internal
 *  @group Keeper
 */
export declare const keeperSchema: z.ZodObject<z.objectUtil.extendShape<{
    exec: z.ZodString;
}, {
    args: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    env: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}>, "strip", z.ZodTypeAny, {
    exec: string;
    args?: string[] | undefined;
    env?: string[] | undefined;
}, {
    exec: string;
    args?: string[] | undefined;
    env?: string[] | undefined;
}>;
export type Config = z.infer<typeof keeperSchema>;
declare const _default: {
    label: string;
    validate: z.ZodObject<z.objectUtil.extendShape<{
        exec: z.ZodString;
    }, {
        args: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        env: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }>, "strip", z.ZodTypeAny, {
        exec: string;
        args?: string[] | undefined;
        env?: string[] | undefined;
    }, {
        exec: string;
        args?: string[] | undefined;
        env?: string[] | undefined;
    }>;
    getState(_runtime: ChainBuilderRuntimeInfo, ctx: ChainBuilderContext, config: Config): Promise<{
        exec: string;
        args?: string[] | undefined;
        env?: string[] | undefined;
    }[]>;
    configInject(ctx: ChainBuilderContext, config: Config): {
        exec: string;
        args?: string[] | undefined;
        env?: string[] | undefined;
    };
    exec(_runtime: ChainBuilderRuntimeInfo, _ctx: ChainBuilderContext, _config: Config): Promise<ChainArtifacts>;
};
export default _default;
//# sourceMappingURL=keeper.d.ts.map