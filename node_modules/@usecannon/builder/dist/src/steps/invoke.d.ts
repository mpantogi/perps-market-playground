import { AbiFunction } from 'viem';
import { z } from 'zod';
import { invokeSchema } from '../schemas';
import { ChainArtifacts, ChainBuilderContext, ChainBuilderContextWithHelpers, ChainBuilderRuntimeInfo, PackageState } from '../types';
/**
 *  Available properties for invoke operation
 *  @public
 *  @group Invoke
 */
export type Config = z.infer<typeof invokeSchema>;
export type EncodedTxnEvents = {
    [name: string]: {
        args: any[];
    }[];
};
export interface InvokeOutputs {
    hashes: string[];
    events?: EncodedTxnEvents[];
}
export declare function formatAbiFunction(v: AbiFunction): string;
declare const invokeSpec: {
    label: string;
    validate: z.ZodObject<z.objectUtil.extendShape<{
        target: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "atleastone">]>;
        func: z.ZodString;
    }, {
        abi: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        args: z.ZodOptional<z.ZodArray<z.ZodLazy<any>, "many">>;
        from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        fromCall: z.ZodOptional<z.ZodObject<{
            func: z.ZodString;
            args: z.ZodOptional<z.ZodArray<z.ZodLazy<any>, "many">>;
        }, "strip", z.ZodTypeAny, {
            func: string;
            args?: any[] | undefined;
        }, {
            func: string;
            args?: any[] | undefined;
        }>>;
        value: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        overrides: z.ZodOptional<z.ZodObject<{
            gasLimit: z.ZodEffects<z.ZodString, string, string>;
        }, "strip", z.ZodTypeAny, {
            gasLimit: string;
        }, {
            gasLimit: string;
        }>>;
        var: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            event: z.ZodString;
            arg: z.ZodNumber;
            expectCount: z.ZodOptional<z.ZodNumber>;
            allowEmptyEvents: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }>>>;
        extra: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            event: z.ZodString;
            arg: z.ZodNumber;
            expectCount: z.ZodOptional<z.ZodNumber>;
            allowEmptyEvents: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }>>>;
        factory: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            event: z.ZodString;
            arg: z.ZodNumber;
            expectCount: z.ZodOptional<z.ZodNumber>;
            artifact: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            abiOf: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
            constructorArgs: z.ZodOptional<z.ZodArray<z.ZodLazy<any>, "many">>;
            allowEmptyEvents: z.ZodOptional<z.ZodBoolean>;
            highlight: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            event: string;
            arg: number;
            artifact?: string | undefined;
            highlight?: boolean | undefined;
            abiOf?: string[] | undefined;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
            constructorArgs?: any[] | undefined;
        }, {
            event: string;
            arg: number;
            artifact?: string | undefined;
            highlight?: boolean | undefined;
            abiOf?: string[] | undefined;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
            constructorArgs?: any[] | undefined;
        }>>>>;
        depends: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
    }>, "strip", z.ZodTypeAny, {
        target: string | [string, ...string[]];
        func: string;
        value?: string | undefined;
        from?: string | undefined;
        abi?: string | undefined;
        args?: any[] | undefined;
        overrides?: {
            gasLimit: string;
        } | undefined;
        depends?: string[] | undefined;
        fromCall?: {
            func: string;
            args?: any[] | undefined;
        } | undefined;
        var?: Record<string, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }> | undefined;
        extra?: Record<string, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }> | undefined;
        factory?: Record<string, {
            event: string;
            arg: number;
            artifact?: string | undefined;
            highlight?: boolean | undefined;
            abiOf?: string[] | undefined;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
            constructorArgs?: any[] | undefined;
        }> | undefined;
    }, {
        target: string | [string, ...string[]];
        func: string;
        value?: string | undefined;
        from?: string | undefined;
        abi?: string | undefined;
        args?: any[] | undefined;
        overrides?: {
            gasLimit: string;
        } | undefined;
        depends?: string[] | undefined;
        fromCall?: {
            func: string;
            args?: any[] | undefined;
        } | undefined;
        var?: Record<string, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }> | undefined;
        extra?: Record<string, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }> | undefined;
        factory?: Record<string, {
            event: string;
            arg: number;
            artifact?: string | undefined;
            highlight?: boolean | undefined;
            abiOf?: string[] | undefined;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
            constructorArgs?: any[] | undefined;
        }> | undefined;
    }>;
    getState(_runtime: ChainBuilderRuntimeInfo, ctx: ChainBuilderContextWithHelpers, config: Config): Promise<({
        to: (`0x${string}` | undefined)[];
        func: string;
        args: string[] | undefined;
        value: string;
        factory: Record<string, {
            event: string;
            arg: number;
            artifact?: string | undefined;
            highlight?: boolean | undefined;
            abiOf?: string[] | undefined;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
            constructorArgs?: any[] | undefined;
        }> | undefined;
        var: Record<string, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }> | undefined;
        extra?: undefined;
    } | {
        to: (`0x${string}` | undefined)[];
        func: string;
        args: string[] | undefined;
        value: string;
        factory: Record<string, {
            event: string;
            arg: number;
            artifact?: string | undefined;
            highlight?: boolean | undefined;
            abiOf?: string[] | undefined;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
            constructorArgs?: any[] | undefined;
        }> | undefined;
        extra: Record<string, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }> | undefined;
        var?: undefined;
    } | {
        to: (`0x${string}` | undefined)[];
        func: string;
        args: string[] | undefined;
        value: string;
        factory?: undefined;
        var?: undefined;
        extra?: undefined;
    })[]>;
    configInject(ctx: ChainBuilderContextWithHelpers, config: Config): {
        target: string | [string, ...string[]];
        func: string;
        value?: string | undefined;
        from?: string | undefined;
        abi?: string | undefined;
        args?: any[] | undefined;
        overrides?: {
            gasLimit: string;
        } | undefined;
        depends?: string[] | undefined;
        fromCall?: {
            func: string;
            args?: any[] | undefined;
        } | undefined;
        var?: Record<string, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }> | undefined;
        extra?: Record<string, {
            event: string;
            arg: number;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
        }> | undefined;
        factory?: Record<string, {
            event: string;
            arg: number;
            artifact?: string | undefined;
            highlight?: boolean | undefined;
            abiOf?: string[] | undefined;
            expectCount?: number | undefined;
            allowEmptyEvents?: boolean | undefined;
            constructorArgs?: any[] | undefined;
        }> | undefined;
    };
    getInputs(config: Config, possibleFields: string[]): import("../access-recorder").AccessComputationResult;
    getOutputs(config: Config, packageState: PackageState): string[];
    exec(runtime: ChainBuilderRuntimeInfo, ctx: ChainBuilderContext, config: Config, packageState: PackageState): Promise<ChainArtifacts>;
    importExisting(runtime: ChainBuilderRuntimeInfo, ctx: ChainBuilderContext, config: Config, packageState: PackageState, existingKeys: string[]): Promise<ChainArtifacts>;
};
export default invokeSpec;
//# sourceMappingURL=invoke.d.ts.map