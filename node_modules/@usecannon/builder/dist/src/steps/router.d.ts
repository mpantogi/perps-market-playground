import * as viem from 'viem';
import { z } from 'zod';
import { ChainBuilderRuntime } from '../runtime';
import { routerSchema } from '../schemas';
import { ChainArtifacts, ChainBuilderContext, ChainBuilderContextWithHelpers, PackageState } from '../types';
/**
 *  Available properties for router operation
 *  @public
 *  @group Router
 */
export type Config = z.infer<typeof routerSchema>;
declare const routerStep: {
    label: string;
    validate: z.ZodObject<{
        contracts: z.ZodArray<z.ZodString, "many">;
        includeReceive: z.ZodOptional<z.ZodBoolean>;
        from: z.ZodOptional<z.ZodString>;
        salt: z.ZodOptional<z.ZodString>;
        depends: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        contracts: string[];
        from?: string | undefined;
        salt?: string | undefined;
        depends?: string[] | undefined;
        includeReceive?: boolean | undefined;
    }, {
        contracts: string[];
        from?: string | undefined;
        salt?: string | undefined;
        depends?: string[] | undefined;
        includeReceive?: boolean | undefined;
    }>;
    getState(runtime: ChainBuilderRuntime, ctx: ChainBuilderContextWithHelpers, config: Config): Promise<{
        contractAbis: {
            [contractName: string]: viem.Abi;
        };
        contractAddresses: {
            [contractName: string]: string;
        };
        config: {
            contracts: string[];
            from?: string | undefined;
            salt?: string | undefined;
            depends?: string[] | undefined;
            includeReceive?: boolean | undefined;
        };
    }[]>;
    configInject(ctx: ChainBuilderContextWithHelpers, config: Config): {
        contracts: string[];
        from?: string | undefined;
        salt?: string | undefined;
        depends?: string[] | undefined;
        includeReceive?: boolean | undefined;
    };
    getInputs(config: Config, possibleFields: string[]): import("../access-recorder").AccessComputationResult;
    getOutputs(_: Config, packageState: PackageState): string[];
    exec(runtime: ChainBuilderRuntime, ctx: ChainBuilderContext, config: Config, packageState: PackageState): Promise<ChainArtifacts>;
};
export default routerStep;
//# sourceMappingURL=router.d.ts.map