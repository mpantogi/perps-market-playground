import { ChainArtifacts, Contract, ContractData } from './types';
import { Abi, Address, Hash, Hex } from 'viem';
export declare const CONSOLE_LOG_ADDRESS = "0x000000000000000000636f6e736f6c652e6c6f67";
export type CallTraceAction = {
    callType: 'staticcall' | 'delegatecall' | 'call';
    from: Address;
    gas: string;
    input: Hex;
    to: Address;
    value: string;
};
export type CreateTraceAction = {
    from: Address;
    gas: string;
    init: string;
    value: string;
};
export type TraceEntry = {
    action: CreateTraceAction | CallTraceAction;
    blockHash: string;
    blockNumber: string;
    result?: {
        gasUsed: string;
        code?: string;
        output: Hex;
    };
    subtraces: number;
    traceAddress: number[];
    transactionHash: Hash;
    transactionPosition: number;
    type: 'call' | 'create';
};
export declare function renderTrace(ctx: ChainArtifacts, traces: TraceEntry[]): string;
export declare function renderTraceEntry(ctx: ChainArtifacts, trace: TraceEntry): string;
export declare function parseFunctionData(ctx: ChainArtifacts, contractAddress: Address, input: Hex, output: Hex): {
    contractName: string;
    parsedInput: string;
    parsedOutput: string;
    isReverted: boolean;
};
export declare function findContract(ctx: ChainArtifacts, condition: (v: {
    address: Address;
    abi: Abi;
}) => boolean, prefix?: string): {
    name: string;
    contract: Contract;
} | null;
export declare function decodeTxError(data: Hex, abis?: ContractData['abi'][]): string | null;
export declare function parseContractErrorReason(contract: Contract | null, data: Hex): string;
export declare function renderResult(result: readonly any[]): string;
//# sourceMappingURL=trace.d.ts.map