import { Headers } from './ipfs';
export interface CannonLoader {
    getLabel(): string;
    read(url: string): Promise<any | null>;
    put(misc: any): Promise<string | null>;
    list?(): Promise<string[]>;
    remove?(url: string): Promise<void>;
}
export declare class IPFSLoader implements CannonLoader {
    ipfsUrl: string;
    gatewayChecked: boolean;
    isGateway: boolean;
    customHeaders: Headers;
    timeout: number;
    retries: number;
    static PREFIX: string;
    constructor(ipfsUrl: string, customHeaders?: Headers, timeout?: number, retries?: number);
    checkGateway(): Promise<void>;
    getLabel(): string;
    put(misc: any): Promise<string>;
    read(url: string): Promise<any>;
    remove(url: string): Promise<void>;
    list(): Promise<string[]>;
}
export declare class InMemoryLoader implements CannonLoader {
    private datas;
    readonly space: number;
    private idx;
    constructor(space: number);
    getLabel(): string;
    read(url: string): Promise<any | null>;
    put(misc: any): Promise<string>;
}
//# sourceMappingURL=loader.d.ts.map