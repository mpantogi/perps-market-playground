/// <reference types="node" />
import * as viem from 'viem';
import { EventEmitter } from 'events';
import { CannonSigner, ChainArtifacts } from './';
import { CannonLoader } from './loader';
import { CannonRegistry } from './registry';
import { ChainBuilderRuntimeInfo, ContractArtifact, DeploymentInfo } from './types';
export declare enum Events {
    PreStepExecute = "pre-step-execute",// step name,
    PostStepExecute = "post-step-execute",// step name,
    DeployContract = "deploy-contract",
    DeployTxn = "deploy-txn",
    DeployExtra = "deploy-extra",
    SkipDeploy = "skip-deploy",// step name, error causing skip
    ResolveDeploy = "resolve-deploy",
    DownloadDeploy = "download-deploy"
}
export declare class CannonStorage extends EventEmitter {
    readonly registry: CannonRegistry;
    readonly defaultLoaderScheme: string;
    readonly loaders: {
        [scheme: string]: CannonLoader;
    };
    constructor(registry: CannonRegistry, loaders: {
        [scheme: string]: CannonLoader;
    }, defaultLoaderScheme?: string);
    lookupLoader(url: string): CannonLoader;
    getLabel(): string;
    readBlob(url: string): Promise<any>;
    putBlob(data: any): Promise<string | null>;
    deleteBlob(url: string): Promise<void> | undefined;
    readDeploy(packageRef: string, chainId: number): Promise<DeploymentInfo | null>;
    putDeploy(deployInfo: DeploymentInfo): Promise<string | null>;
}
export declare class ChainBuilderRuntime extends CannonStorage implements ChainBuilderRuntimeInfo {
    provider: viem.PublicClient;
    readonly chainId: number;
    readonly getSigner: (addr: viem.Address) => Promise<CannonSigner>;
    readonly getDefaultSigner: (txn: Omit<viem.SendTransactionParameters, 'account' | 'chain'>, salt?: string) => Promise<CannonSigner>;
    readonly getArtifact: (name: string) => Promise<ContractArtifact>;
    readonly snapshots: boolean;
    readonly allowPartialDeploy: boolean;
    private publicSourceCode;
    private signals;
    private _gasPrice;
    private _gasFee;
    private _priorityGasFee;
    private cleanSnapshot;
    private loadedMisc;
    misc: {
        artifacts: {
            [label: string]: any;
        };
    };
    constructor(info: ChainBuilderRuntimeInfo, registry: CannonRegistry, loaders?: {
        [scheme: string]: CannonLoader;
    }, defaultLoaderScheme?: string);
    cancel(): void;
    get gasPrice(): string | undefined;
    get gasFee(): string | undefined;
    get priorityGasFee(): string | undefined;
    isCancelled(): boolean;
    checkNetwork(): Promise<void>;
    loadState(stateDump: viem.Hex): Promise<void>;
    dumpState(): Promise<`0x${string}` | null>;
    clearNode(): Promise<void>;
    recordMisc(): Promise<string | null>;
    restoreMisc(url: string): Promise<void>;
    reportContractArtifact(n: string, artifact: ContractArtifact): void;
    updateProviderArtifacts(artifacts: ChainArtifacts): void;
    setPublicSourceCode(isPublic: boolean): void;
    derive(overrides: Partial<ChainBuilderRuntimeInfo>): ChainBuilderRuntime;
}
//# sourceMappingURL=runtime.d.ts.map