"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerAction = exports.validateConfig = exports.ActionKinds = void 0;
const zod_1 = require("./error/zod");
const schemas_1 = require("./schemas");
const clone_1 = __importDefault(require("./steps/clone"));
const deploy_1 = __importDefault(require("./steps/deploy"));
const invoke_1 = __importDefault(require("./steps/invoke"));
const keeper_1 = __importDefault(require("./steps/keeper"));
const pull_1 = __importDefault(require("./steps/pull"));
const router_1 = __importDefault(require("./steps/router"));
const var_1 = __importDefault(require("./steps/var"));
/**
 * @internal
 * All the different types (and their implementations)
 */
exports.ActionKinds = {};
/**
 *  @internal
 *  parses the schema and performs zod validations safely with a custom error handler
 */
function validateConfig(schema, config) {
    const result = schema.safeParse(config);
    if (!result.success) {
        const errors = result.error.errors;
        (0, zod_1.handleZodErrors)(errors);
    }
    return result;
}
exports.validateConfig = validateConfig;
function registerAction(action) {
    if (typeof action.label !== 'string') {
        throw new Error(`missing "label" property on plugin definition ${JSON.stringify(action)}`);
    }
    const { label } = action;
    if (exports.ActionKinds[action.label]) {
        throw new Error('action kind already declared: ' + label);
    }
    exports.ActionKinds[label] = action;
    schemas_1.chainDefinitionSchema.pick({
        description: true,
        keywords: true,
        setting: true,
        import: true,
    })[label] = { values: action.validate };
}
exports.registerAction = registerAction;
registerAction(deploy_1.default);
registerAction(pull_1.default);
registerAction(invoke_1.default);
registerAction(keeper_1.default);
registerAction(clone_1.default);
registerAction(router_1.default);
registerAction(var_1.default);
// backwards compatibility
registerAction(Object.assign({}, deploy_1.default, { label: 'contract' }));
registerAction(Object.assign({}, pull_1.default, { label: 'import' }));
registerAction(Object.assign({}, clone_1.default, { label: 'provision' }));
registerAction(Object.assign({}, var_1.default, { label: 'setting' }));
//# sourceMappingURL=actions.js.map