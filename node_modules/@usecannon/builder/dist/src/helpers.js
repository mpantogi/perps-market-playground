"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCannonContract = exports.getDefaultStorage = void 0;
const viem = __importStar(require("viem"));
const chains_1 = require("viem/chains");
const builder_1 = require("./builder");
const constants_1 = require("./constants");
const definition_1 = require("./definition");
const loader_1 = require("./loader");
const registry_1 = require("./registry");
const runtime_1 = require("./runtime");
const util_1 = require("./util");
function getDefaultStorage() {
    const registryChainIds = constants_1.DEFAULT_REGISTRY_CONFIG.map((registry) => registry.chainId);
    const onChainRegistries = registryChainIds.map((chainId) => new registry_1.OnChainRegistry({
        address: constants_1.DEFAULT_REGISTRY_ADDRESS,
        provider: viem.createPublicClient({
            // TODO: support extracting any chain
            chain: viem.extractChain({ chains: [chains_1.mainnet, chains_1.optimism], id: chainId }),
            transport: viem.http(),
        }),
    }));
    // Create a regsitry that loads data first from Memory to be able to utilize
    // the locally built data
    const fallbackRegistry = new registry_1.FallbackRegistry([new registry_1.InMemoryRegistry(), ...onChainRegistries]);
    return new runtime_1.CannonStorage(fallbackRegistry, {
        ipfs: new loader_1.IPFSLoader((0, constants_1.getCannonRepoRegistryUrl)()),
    });
}
exports.getDefaultStorage = getDefaultStorage;
async function getCannonContract(args) {
    const storage = args.storage ?? getDefaultStorage();
    const deployInfo = await storage.readDeploy(typeof args.package === 'string' ? args.package : args.package.fullPackageRef, args.chainId ?? constants_1.CANNON_CHAIN_ID);
    if (!deployInfo) {
        throw new Error(`cannon package not found: ${args.package} (${args.chainId})`);
    }
    const artifacts = (0, builder_1.getArtifacts)(new definition_1.ChainDefinition(deployInfo.def), deployInfo.state);
    const contract = (0, util_1.getContractFromPath)(artifacts, args.contractName);
    if (!contract) {
        throw new Error(`requested contract ${args.contractName} not found in cannon package: ${args.package} (${args.chainId})`);
    }
    return contract;
}
exports.getCannonContract = getCannonContract;
//# sourceMappingURL=helpers.js.map