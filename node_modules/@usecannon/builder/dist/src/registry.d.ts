import EventEmitter from 'promise-events';
import * as viem from 'viem';
import CannonRegistryAbi from './abis/CannonRegistry';
import { TxData } from './multicall';
import { CannonSigner } from './types';
export declare abstract class CannonRegistry {
    abstract publish(packagesNames: string[], chainId: number, url: string, metaUrl: string): Promise<string[]>;
    publishMany(toPublish: {
        packagesNames: string[];
        chainId: number;
        url: string;
        metaUrl: string;
    }[]): Promise<string[]>;
    getUrl(serviceRef: string, chainId: number): Promise<string | null>;
    getMetaUrl(serviceRef: string, chainId: number): Promise<string | null>;
    getAllUrls(filterPackageRef?: string, chainId?: number): Promise<Set<string>>;
    abstract getLabel(): string;
}
/**
 * keeps track of packages in a simple JS object
 * useful for testing and deployment dry-runs
 */
export declare class InMemoryRegistry extends CannonRegistry {
    readonly pkgs: {
        [name: string]: {
            [variant: string]: string;
        };
    };
    readonly metas: {
        [name: string]: {
            [variant: string]: string;
        };
    };
    count: number;
    getLabel(): string;
    publish(packagesNames: string[], chainId: number, url: string, meta?: string): Promise<string[]>;
    getUrl(packageOrServiceRef: string, chainId: number): Promise<string | null>;
    getMetaUrl(packageOrServiceRef: string, chainId: number): Promise<string | null>;
    getAllUrls(filterPackage?: string, chainId?: number): Promise<Set<string>>;
}
export declare class FallbackRegistry extends EventEmitter implements CannonRegistry {
    readonly memoryCacheRegistry: InMemoryRegistry;
    readonly registries: any[];
    constructor(registries: any[]);
    getLabel(): string;
    getUrl(packageRef: string, chainId: number): Promise<string | null>;
    getMetaUrl(packageOrServiceRef: string, chainId: number): Promise<string | null>;
    getAllUrls(filterPackageRef?: string, chainId?: number): Promise<Set<string>>;
    publish(packagesNames: string[], chainId: number, url: string, metaUrl?: string): Promise<string[]>;
    publishMany(toPublish: {
        packagesNames: string[];
        chainId: number;
        url: string;
        metaUrl: string;
    }[]): Promise<string[]>;
}
export declare class OnChainRegistry extends CannonRegistry {
    provider?: viem.PublicClient | null;
    signer?: CannonSigner | null;
    contract: {
        address: viem.Address;
        abi: typeof CannonRegistryAbi;
    };
    overrides: any;
    constructor({ address, signer, provider, overrides, }: {
        address: viem.Address;
        signer?: CannonSigner;
        provider?: viem.PublicClient;
        overrides?: any;
    });
    getLabel(): string;
    /**
     * Checks if package needs to be registered before publishing.
     * @param packageName
     * @returns Boolean
     */
    _isPackageRegistered(packageName: string): Promise<boolean>;
    _checkPackageOwnership(packageName: string): Promise<void>;
    private _preparePackageData;
    private _unpublishPackages;
    private _publishPackages;
    publish(packagesNames: string[], chainId: number, url: string, metaUrl?: string): Promise<string[]>;
    publishMany(toPublish: {
        packagesNames: string[];
        chainId: number;
        url: string;
        metaUrl?: string;
    }[]): Promise<string[]>;
    unpublish(packagesNames: string[], chainId: number): Promise<string[]>;
    unpublishMany(toUnpublish: {
        name: string[];
        chainId: number;
    }[]): Promise<string[]>;
    getUrl(packageOrServiceRef: string, chainId: number): Promise<string | null>;
    getMetaUrl(packageOrServiceRef: string, chainId: number): Promise<string | null>;
    getAllUrls(filterPackageRef?: string, chainId?: number): Promise<Set<string>>;
    getPackageOwner(packageName: string): Promise<viem.Address>;
    getAdditionalPublishers(packageName: string): Promise<viem.Address[]>;
    estimateGasForSetPackageOwnership(transactions: TxData): Promise<bigint>;
    calculatePublishingFee(packageCount: number): Promise<bigint>;
    getRegisterFee(): Promise<bigint>;
    getPublishFee(): Promise<bigint>;
    prepareSetPackageOwnership(packageName: string, packageOwner?: viem.Address, shouldNominateOwner?: boolean): Promise<{
        functionName: string;
        args: (`0x${string}` | `0x${string}`[])[];
        account: `0x${string}` | viem.Account;
        address: `0x${string}`;
        abi: ({
            inputs: ({
                internalType: string;
                name: string;
                type: "address";
            } | {
                internalType: string;
                name: string;
                type: "uint256";
            })[];
            stateMutability: "nonpayable";
            type: "constructor";
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: "uint256";
            }[];
            name: string;
            type: "error";
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: "address";
            }[];
            name: string;
            type: "error";
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: "bytes32";
            }[];
            name: string;
            type: "error";
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: "string";
            }[];
            name: string;
            type: "error";
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: false;
            inputs: ({
                indexed: true;
                internalType: string;
                name: string;
                type: "bytes32";
            } | {
                indexed: false;
                internalType: string;
                name: string;
                type: "string";
            } | {
                indexed: false;
                internalType: string;
                name: string;
                type: "address";
            } | {
                indexed: false;
                internalType: string;
                name: string;
                type: "uint256";
            })[];
            name: string;
            type: "event";
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            anonymous: false;
            inputs: ({
                indexed: true;
                internalType: string;
                name: string;
                type: "bytes32";
            } | {
                indexed: false;
                internalType: string;
                name: string;
                type: "address[]";
            })[];
            name: string;
            type: "event";
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            anonymous: false;
            inputs: ({
                indexed: true;
                internalType: string;
                name: string;
                type: "bytes32";
            } | {
                indexed: true;
                internalType: string;
                name: string;
                type: "address";
            })[];
            name: string;
            type: "event";
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            anonymous: false;
            inputs: ({
                indexed: true;
                internalType: string;
                name: string;
                type: "bytes32";
            } | {
                indexed: false;
                internalType: string;
                name: string;
                type: "bytes32";
            })[];
            name: string;
            type: "event";
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            anonymous: false;
            inputs: ({
                indexed: true;
                internalType: string;
                name: string;
                type: "address";
            } | {
                indexed: false;
                internalType: string;
                name: string;
                type: "address";
            })[];
            name: string;
            type: "event";
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: never[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: "uint256";
            }[];
            stateMutability: "view";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: "bytes32";
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: "address[]";
            }[];
            stateMutability: "view";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: "bytes32";
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: "string";
            }[];
            stateMutability: "view";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: "bytes32";
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: "address";
            }[];
            stateMutability: "view";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: "bytes32";
            } | {
                internalType: string;
                name: string;
                type: "address";
            })[];
            name: string;
            outputs: never[];
            stateMutability: "nonpayable";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: "bytes32";
            } | {
                internalType: string;
                name: string;
                type: "bytes32[]";
            } | {
                internalType: string;
                name: string;
                type: "string";
            })[];
            name: string;
            outputs: never[];
            stateMutability: "payable";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: "bytes32";
            } | {
                internalType: string;
                name: string;
                type: "address[]";
            })[];
            name: string;
            outputs: never[];
            stateMutability: "nonpayable";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: "uint256";
            }[];
            name: string;
            outputs: never[];
            stateMutability: "nonpayable";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: "bytes32";
            } | {
                internalType: string;
                name: string;
                type: "address";
            })[];
            name: string;
            outputs: never[];
            stateMutability: "payable";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: "bytes32";
            } | {
                internalType: string;
                name: string;
                type: "bytes32[]";
            })[];
            name: string;
            outputs: never[];
            stateMutability: "nonpayable";
            type: "function";
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: "bytes32";
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: "bool";
            }[];
            stateMutability: "pure";
            type: "function";
            anonymous?: undefined;
        })[];
    }[]>;
    setPackageOwnership(transactions: TxData): Promise<`0x${string}`>;
    setAdditionalPublishers(packageName: string, mainnetPublishers: viem.Address[], optimismPublishers: viem.Address[]): Promise<`0x${string}`>;
    private _logEstimatedGas;
}
//# sourceMappingURL=registry.d.ts.map