/// <reference types="node" />
import { Buffer } from 'buffer';
export interface Headers {
    [key: string]: string | string[] | number | boolean | null;
}
export declare function compress(data: string): Uint8Array;
export declare function uncompress(data: any): string;
export declare function getContentCID(value: string | Buffer): Promise<string>;
export declare function setAxiosRetries(totalRetries?: number): void;
export declare function isIpfsGateway(ipfsUrl: string, _customHeaders?: any): Promise<boolean>;
export declare function readIpfs(ipfsUrl: string, hash: string, customHeaders: Headers | undefined, isGateway: boolean, timeout: number, retries?: number): Promise<any>;
export declare function writeIpfs(ipfsUrl: string, info: any, customHeaders: Headers | undefined, isGateway: boolean, timeout: number, retries?: number): Promise<string>;
export declare function deleteIpfs(ipfsUrl: string, hash: string, customHeaders: Headers | undefined, isGateway: boolean, timeout: number): Promise<void>;
export declare function listPinsIpfs(ipfsUrl: string, customHeaders: Headers | undefined, isGateway: boolean): Promise<string[]>;
export declare function fetchIPFSAvailability(ipfsUrl: string | undefined, cid: string): Promise<number | undefined>;
//# sourceMappingURL=ipfs.d.ts.map