"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileContract = exports.getCompileInput = void 0;
const solc_1 = __importDefault(require("solc"));
function getCompileInput(contractName, sourceCode, evmVersion) {
    return {
        language: 'Solidity',
        sources: {
            [`${contractName}.sol`]: {
                content: sourceCode,
            },
        },
        settings: {
            outputSelection: {
                '*': { '*': ['*'] },
            },
            evmVersion,
        },
    };
}
exports.getCompileInput = getCompileInput;
async function compileContract(contractName, sourceCode, evmVersion) {
    const input = getCompileInput(contractName, sourceCode, evmVersion);
    const solResult = JSON.parse(await solc_1.default.compile(JSON.stringify(input)));
    if (solResult.errors) {
        throw new Error([
            `There was an error when compiling "${contractName}".`,
            ...solResult.errors.map((err) => err.message),
        ].join(' '));
    }
    const info = solResult.contracts[`${contractName}.sol`][contractName];
    const metadata = JSON.parse(info.metadata);
    return {
        abi: info.abi,
        metadata: info.metadata,
        solcVersion: metadata.compiler.version,
        assembly: info.evm.assembly,
        bytecode: info.evm.bytecode.object,
        deployedBytecode: info.evm.deployedBytecode.object,
        gasEstimates: info.evm.gasEstimates,
    };
}
exports.compileContract = compileContract;
//# sourceMappingURL=compile.js.map